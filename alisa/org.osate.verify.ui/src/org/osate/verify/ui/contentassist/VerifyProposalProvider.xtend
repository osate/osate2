/**
 * Copyright (c) 2004-2021 Carnegie Mellon University and others. (see Contributors file). 
 * All Rights Reserved.
 * 
 * NO WARRANTY. ALL MATERIAL IS FURNISHED ON AN "AS-IS" BASIS. CARNEGIE MELLON UNIVERSITY MAKES NO WARRANTIES OF ANY
 * KIND, EITHER EXPRESSED OR IMPLIED, AS TO ANY MATTER INCLUDING, BUT NOT LIMITED TO, WARRANTY OF FITNESS FOR PURPOSE
 * OR MERCHANTABILITY, EXCLUSIVITY, OR RESULTS OBTAINED FROM USE OF THE MATERIAL. CARNEGIE MELLON UNIVERSITY DOES NOT
 * MAKE ANY WARRANTY OF ANY KIND WITH RESPECT TO FREEDOM FROM PATENT, TRADEMARK, OR COPYRIGHT INFRINGEMENT.
 * 
 * This program and the accompanying materials are made available under the terms of the Eclipse Public License 2.0
 * which is available at https://www.eclipse.org/legal/epl-2.0/
 * SPDX-License-Identifier: EPL-2.0
 * 
 * Created, in part, with funding and support from the United States Government. (see Acknowledgments file).
 * 
 * This program includes and/or can make use of certain third party source code, object code, documentation and other
 * files ("Third Party Software"). The Third Party Software that is used by this program is dependent upon your system
 * configuration. By using this program, You agree to comply with any and all relevant Third Party Software terms and
 * conditions contained in any such Third Party Software or separate license file distributed with such Third Party
 * Software. The parties who own the Third Party Software ("Third Party Licensors") are intended third party benefici-
 * aries to this license with respect to the terms applicable to their Third Party Software. Third Party Software li-
 * censes only apply to the Third Party Software and not any other portion of this program or this program as a whole.
 */

/*
 * generated by Xtext
 */
package org.osate.verify.ui.contentassist

import java.util.ArrayList
import org.eclipse.emf.ecore.EObject
import org.eclipse.emf.ecore.util.EcoreUtil
import org.eclipse.xtext.Assignment
import org.eclipse.xtext.CrossReference
import org.eclipse.xtext.ui.editor.contentassist.ContentAssistContext
import org.eclipse.xtext.ui.editor.contentassist.ICompletionProposalAcceptor
import org.osate.verify.verify.VerificationActivity
import org.osate.verify.verify.VerificationMethod
import org.osate.verify.verify.VerificationPlan

/**
 * see http://www.eclipse.org/Xtext/documentation.html#contentAssist on how to customize content assistant
 */
class VerifyProposalProvider extends AbstractVerifyProposalProvider {

	override void completeClaim_Requirement(EObject model, Assignment assignment, ContentAssistContext context,
		ICompletionProposalAcceptor acceptor) {
		// filter scope to only include requirements that exist in system requirement of verification plan
		val forSystemRequirements = (model.eContainer as VerificationPlan).getRequirementSet
		val ArrayList<EObject> nameList = newArrayList();
		lookupCrossReference(assignment.getTerminal() as CrossReference, context, acceptor, [
			val proposedObj = EcoreUtil.resolve(EObjectOrProxy, model) // Gets all Requirements from Loose Scope
			// no duplicates. Seems like duplicates with full qualified names are check later so that we get the short one.
			if (nameList.contains(proposedObj)) {
				return false
			} else {
				nameList.add(proposedObj)
			}
			// Scope handles correctly to make sure all valid requirements are included in scope without '.'
			forSystemRequirements.requirements.contains(proposedObj)
		]);
	}
	
	override void completeVerificationMethod_Category(EObject model, Assignment assignment,
		ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		lookupCrossReference(
			assignment.getTerminal() as CrossReference,
			context,
			acceptor,
			[description| val match = description.qualifiedName.toString; 
				 ! (model as VerificationMethod).category.exists[c|c.name.equals(match)]
			]
		);
	}
	
	override void completeVerificationActivity_Category(EObject model, Assignment assignment,
		ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		lookupCrossReference(
			assignment.getTerminal() as CrossReference,
			context,
			acceptor,
			[description| val match = description.qualifiedName.toString; 
				 ! (model as VerificationActivity).category.exists[c|c.name.equals(match)]
			]
		);
	}
	
	override completeVerificationMethod_Properties(EObject model, Assignment assignment, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		lookupCrossReference(assignment.terminal as CrossReference, context, acceptor, predeclaredFilter)
	}
}