/**
 * Copyright (c) 2004-2021 Carnegie Mellon University and others. (see Contributors file). 
 * All Rights Reserved.
 * 
 * NO WARRANTY. ALL MATERIAL IS FURNISHED ON AN "AS-IS" BASIS. CARNEGIE MELLON UNIVERSITY MAKES NO WARRANTIES OF ANY
 * KIND, EITHER EXPRESSED OR IMPLIED, AS TO ANY MATTER INCLUDING, BUT NOT LIMITED TO, WARRANTY OF FITNESS FOR PURPOSE
 * OR MERCHANTABILITY, EXCLUSIVITY, OR RESULTS OBTAINED FROM USE OF THE MATERIAL. CARNEGIE MELLON UNIVERSITY DOES NOT
 * MAKE ANY WARRANTY OF ANY KIND WITH RESPECT TO FREEDOM FROM PATENT, TRADEMARK, OR COPYRIGHT INFRINGEMENT.
 * 
 * This program and the accompanying materials are made available under the terms of the Eclipse Public License 2.0
 * which is available at https://www.eclipse.org/legal/epl-2.0/
 * SPDX-License-Identifier: EPL-2.0
 * 
 * Created, in part, with funding and support from the United States Government. (see Acknowledgments file).
 * 
 * This program includes and/or can make use of certain third party source code, object code, documentation and other
 * files ("Third Party Software"). The Third Party Software that is used by this program is dependent upon your system
 * configuration. By using this program, You agree to comply with any and all relevant Third Party Software terms and
 * conditions contained in any such Third Party Software or separate license file distributed with such Third Party
 * Software. The parties who own the Third Party Software ("Third Party Licensors") are intended third party benefici-
 * aries to this license with respect to the terms applicable to their Third Party Software. Third Party Software li-
 * censes only apply to the Third Party Software and not any other portion of this program or this program as a whole.
 */

import org.eclipse.emf.common.util.EList
import org.eclipse.emf.ecore.EObject
import org.osate.aadl2.Aadl2Factory
import org.osate.aadl2.Aadl2Package
import org.osate.aadl2.AadlBoolean
import org.osate.aadl2.AadlInteger
import org.osate.aadl2.AadlReal
import org.osate.aadl2.AadlString
import org.osate.aadl2.BasicProperty
import org.osate.aadl2.BooleanLiteral
import org.osate.aadl2.EnumerationType
import org.osate.aadl2.IntegerLiteral
import org.osate.aadl2.ListType
import org.osate.aadl2.NumberType
import org.osate.aadl2.Property
import org.osate.aadl2.PropertyConstant
import org.osate.aadl2.PropertyExpression
import org.osate.aadl2.PropertyType
import org.osate.aadl2.RangeType
import org.osate.aadl2.RealLiteral
import org.osate.aadl2.RecordType
import org.osate.aadl2.ReferenceType
import org.osate.aadl2.StringLiteral
import org.osate.aadl2.UnitsType
import org.osate.alisa.common.common.ABinaryOperation
import org.osate.alisa.common.common.AConditional
import org.osate.alisa.common.common.AExpression
import org.osate.alisa.common.common.AFunctionCall
import org.osate.alisa.common.common.AModelReference
import org.osate.alisa.common.common.APropertyReference
import org.osate.alisa.common.common.ARange
import org.osate.alisa.common.common.AUnaryOperation
import org.osate.alisa.common.common.AUnitExpression
import org.osate.alisa.common.common.AVariableReference
import org.osate.alisa.common.common.CommonFactory
import org.osate.alisa.common.common.CommonPackage
import org.osate.alisa.common.common.ComputeDeclaration
import org.osate.alisa.common.common.ModelRef
import org.osate.alisa.common.common.PropertyRef
import org.osate.alisa.common.common.TypeRef
import org.osate.alisa.common.common.ValDeclaration
import org.osate.alisa.common.validation.AbstractCommonValidator

system org.osate.alisa.common.typing.CommonTypeSystem

validatorExtends AbstractCommonValidator


auxiliary {
	combineNumeric(NumberType left, NumberType right): NumberType
}


judgments {
	type |- EObject o : output PropertyType
//		error 'cannot type ' + stringRep(o)
//		source o

	assignable |- AExpression exp |> PropertyType target
		error stringRep(exp) + ' cannot be assigned to ' + stringRep(target)
		source exp

	compatible |- PropertyType left <: PropertyType right
	sameType |- PropertyType left ~~ PropertyType right
	sameTypes |= EList<BasicProperty> left ~~ EList<BasicProperty> right
}


auxiliary combineNumeric(NumberType left, NumberType right) {
	val result =
			if (left instanceof AadlInteger && right instanceof AadlInteger)
				Aadl2Factory.eINSTANCE.createAadlInteger
			else
				Aadl2Factory.eINSTANCE.createAadlReal
	result.referencedUnitsType =
			if (left.unitsType !== null)
				left.unitsType
			else
				right.unitsType
	result
}


// type inference rules

rule ValDeclaration
  G |- ValDeclaration valDecl : PropertyType type
from {
	val declared = valDecl.getType()
	{
		declared !== null && !valDecl.range
		G |- declared : type
	}
	or
	{
		declared !== null && valDecl.range
		var PropertyType numeric
		G |- declared : numeric
		if (numeric instanceof NumberType) {
			val rt = Aadl2Factory.eINSTANCE.createRangeType
			rt.ownedNumberType = numeric
			type = rt
		} else {
			fail
				error 'typing: ranges must be numeric'
				source declared
		}
	}
	or
	{
		declared === null
		G |- valDecl.value : type
	}
}

rule ComputeDeclaration
  G |- ComputeDeclaration valDecl : PropertyType type
from {
	val declared = valDecl.getType()
	declared !== null
	G |- declared : type
}


// type of property

axiom PropertyRef
	G |- PropertyRef propRef : propRef.ref.propertyType

axiom TypeRef
	G |- TypeRef typeRef : typeRef.ref

axiom PropertyType
	G |- PropertyType propType : propType


// binary operations

rule AExpression
	G |- PropertyExpression param : PropertyType type
	error 'typing: unhandled case' + stringRep(param)
	source param
from {
	fail
}
 
rule ABinaryExpression
	G |- ABinaryOperation binary : PropertyType type
from {
	G |- binary.left : var PropertyType leftType
	G |- binary.right : var PropertyType rightType
	val op = binary.operator
	switch op {
		case OR, case ALT_OR, case AND, case ALT_AND: {
			if (!(leftType instanceof AadlBoolean)) {
				fail
					error 'typing: operand must be boolean'
					source binary.left
			}
			if (!(rightType instanceof AadlBoolean)) {
				fail
					error 'typing: operand must be boolean'
					source binary.right
			}
			type = Aadl2Factory.eINSTANCE.createAadlBoolean
		}
		case EQ, case NEQ: {
			G |- leftType ~~ rightType
			or {
				fail
					error 'typing: cannot compare ' + stringRep(leftType) + ' and ' + stringRep(rightType)
					source binary
			}
			type = Aadl2Factory.eINSTANCE.createAadlBoolean
		}
		case LT, case LEQ, case GT, case GEQ, case IN,
		case PLUS, case MINUS, case MULT, case DIV: {
			if (!(leftType instanceof NumberType || leftType instanceof RangeType)) {
				fail	
					error 'typing: operand must be numeric or a range'
					source binary.left
			}
			if (!(rightType instanceof NumberType || rightType instanceof RangeType)) {
				fail	
					error 'typing: operand must be numeric or a range'
					source binary.right
			}
			// Check where ranges are allowed
			switch (op) {
				case PLUS, case MULT:
					if (!(leftType instanceof RangeType && rightType instanceof RangeType
						|| leftType instanceof NumberType && rightType instanceof NumberType
					)) {
						fail
							error 'typing: operands must be both numeric or both ranges'
							source binary
					}
				case IN:
					if (!(rightType instanceof RangeType)) {
						fail
							error 'typing: operand must be a range'
							source binary.right
					}
				case DIV, case MINUS:
					if (!(leftType instanceof NumberType)) {
						fail
							error 'typing: operand must be numeric'
							source binary.left
					} else if (!(rightType instanceof NumberType)) {
						fail
							error 'typing: operand must be numeric'
							source binary.right
					}
				default: {
					//nothing
				}
			}
			// check for correct units types
			val leftNum = if (leftType instanceof RangeType) leftType.numberType else leftType as NumberType
			val rightNum = if (rightType instanceof RangeType) rightType.numberType else rightType as NumberType
			switch (op) {
				case LT, case LEQ, case GT, case GEQ, case IN: {
					G |- leftNum ~~ rightNum
					or {
						fail
							error 'typing: arguments have different unit types'
							source binary
					}
					type = Aadl2Factory.eINSTANCE.createAadlBoolean
				}
				case PLUS, case MINUS: {
					G |- leftNum ~~ rightNum
					or {
						fail
							error 'typing: arguments have different unit types'
							source binary
					}
					type = combineNumeric(leftNum, rightNum)
				}
				case MULT: {
					if (leftNum.unitsType !== null && rightNum.unitsType !== null) {
						fail
							error 'typing: only one operand may have a unit'
							source binary
					}
					type = combineNumeric(leftNum, rightNum)
				}
				case DIV: {
					val t = Aadl2Factory.eINSTANCE.createAadlReal
					if (leftNum.unitsType !== null && rightNum.unitsType !== null) {
						G |- leftNum ~~ rightNum
						or {
							fail
								error 'typing: arguments have different unit types'
								source binary
						}
					} else if (rightNum.unitsType !== null) {
						fail
							error 'typing: argument must have a unit when dividing by a number with unit'
							source binary.left
					} else {
						t.referencedUnitsType = leftNum.unitsType
					}
					type = t
				}
				default: {
					// should not happen
					fail
						error 'typing: unhandled binary operator encountered'
						source binary
				}
			}
		}
		case INTDIV, case MOD: {
			if (!(leftType instanceof AadlInteger)) {
				fail
					error 'typing: argument must be an integer'
					source binary.left
			}
			if (!(rightType instanceof AadlInteger)) {
				fail
					error 'typing: argument must be an integer'
					source binary.right
			}
			val leftNum = leftType as NumberType
			val rightNum = rightType as NumberType
			val t = Aadl2Factory.eINSTANCE.createAadlInteger

			if (leftNum.unitsType !== null && rightNum.unitsType !== null) {
				G |- leftNum ~~ rightNum
				or {
					fail
						error 'typing: arguments have different unit types'
						source binary
				}
			} else if (rightNum.unitsType !== null) {
				fail
					error 'typing: argument must have a unit when dividing by a number with unit'
					source binary.left
			} else {
				t.referencedUnitsType = leftNum.unitsType
			}
			type = t
		}
		default: {
			// should not happen
			fail
				error 'typing: unhandled binary operator encountered'
				source binary
		}
	}
}

rule UnaryExpression
	G |- AUnaryOperation unary : PropertyType type
from {
	G |- unary.operand : var PropertyType opType
	switch (unary.operator) {
		case PLUS, case MINUS:
			if (opType instanceof NumberType) {
				type = opType
			} else {
				fail	
					error 'typing: operand is not numeric'
					source unary
			}
		case NOT:
			type = Aadl2Factory.eINSTANCE.createAadlBoolean
		default: {
			// should not happen
			fail
				error 'typing: unhandled unary operator encountered'
				source unary		
		}
	}
}


// simple types

rule AVariableReference
	G |- AVariableReference vRef : PropertyType type
from {
	G |- vRef.variable : type
}

// types for primary expressions

rule RangeExpression
	G |- ARange rangeExp : PropertyType type
from {
	G |- rangeExp.minimum : var PropertyType minType
	G |- rangeExp.maximum : var PropertyType maxType
	
	if (!(minType instanceof NumberType)) {
		fail
			error 'typing: lower bound must be numeric'
			source rangeExp.minimum
	}
	if (!(maxType instanceof NumberType)) {
		fail
			error 'typing: upper bound must be numeric'
			source rangeExp.maximum
	}
	
	G |- minType ~~ maxType
	or {
		fail
			error "typing: lower and upper bound have different units"
			source rangeExp
	}
	
	val range = Aadl2Factory.eINSTANCE.createRangeType
	if (minType instanceof AadlReal || maxType instanceof AadlReal) {
		range.createOwnedNumberType(Aadl2Package.eINSTANCE.aadlReal)
	} else {
		range.createOwnedNumberType(Aadl2Package.eINSTANCE.aadlInteger)
	}
	range.numberType.referencedUnitsType = (minType as NumberType).unitsType
	type = range
}

rule IfExpression
	G |- AConditional ifExp : PropertyType type
from {
	G |- ifExp.^if : var PropertyType ifType
	G |- ifExp.^then : var PropertyType thenType
	G |- ifExp.^else : var PropertyType elseType
	
	if (!(ifType instanceof AadlBoolean)) {
		fail
			error 'typing: condition must be boolean'
			source ifExp.^if
	}
	
	G |- thenType ~~ elseType
	or {
		fail
			error 'typing: then and else part must have the same type'
			source ifExp
	}
	
	if (thenType instanceof NumberType) {
		type = combineNumeric(thenType, elseType as NumberType)
	} else {
		type = thenType
	}
}

rule FunctionCall
	G |- AFunctionCall call : PropertyType type
from {
	switch (call.function) {
		case 'min', case 'max': {
			call.arguments.size >= 1 
			or {
				fail
					error call.function + ' must have at least one argument'
					source call
			}
			val unitsType = {
					G |- call.arguments.get(0) : var PropertyType t
					if (t instanceof NumberType) {
						t.unitsType
					} else if (t instanceof RangeType) {
						t.numberType.unitsType
					}
			} 
			call.arguments.forEach [arg |
				G |- arg : var PropertyType argType
				switch (argType) {
					AadlReal: {
						if (argType.unitsType !== unitsType) {
							fail
								error 'typing: all arguments must have the same units type'
								source arg
						}
					}
					AadlInteger: {
						if (argType.unitsType !== unitsType) {
							fail
								error 'typing: all arguments must have the same units type'
								source arg
						}
					}
					RangeType: {
						if (argType.numberType.unitsType !== unitsType) {
							fail
								error 'typing: all arguments must have the same units type'
								source arg
						}
					}
					default: {
						fail
					  	error 'typing: argument must be numeric or a range'
					  	source arg
					}
				}
			]
			val allInt =
					call.arguments.forall [arg |
						G |- arg : var PropertyType argType
						switch (argType) {
							AadlReal: false
							AadlInteger: true
							RangeType: argType.numberType instanceof AadlInteger
							default: false
						}
					]
			type = if (allInt) Aadl2Factory.eINSTANCE.createAadlInteger else Aadl2Factory.eINSTANCE.createAadlReal;
			(type as NumberType).referencedUnitsType = unitsType
		}
		case 'abs': {
			call.arguments.size === 1 
			or {
				fail
					error 'abs must have one argument'
					source call
			}
			val arg = call.arguments.get(0)
			G |- arg : var PropertyType argType
			if (!(argType instanceof NumberType)) {
				fail
			  	error 'typing: argument must be numeric'
			  	source arg
			}
			type = argType				
		}
		case 'floor', case 'ceil', case 'round': {
			call.arguments.size === 1 
			or {
				fail
					error 'abs must have one argument'
					source call
			}
			val arg = call.arguments.get(0)
			G |- arg : var PropertyType argType
			if (argType instanceof NumberType) {
				type = Aadl2Factory.eINSTANCE.createAadlInteger;				
				(type as NumberType).referencedUnitsType = argType.unitsType
			} else {
				fail
			  	error 'typing: argument must be numeric'
			  	source arg
			}
		}
		default: {
			if (InterpreterUtil.instance.methodExists(call.function) !== null) {
			fail
				error 'unsupported function: ' + call.function
				source call
			}
		}
	}
}

rule UnitExpression
	G |- AUnitExpression unitExp : PropertyType type
from {
	G |- unitExp.expression : var PropertyType expType
	
	if (unitExp.unit === null) {
		type = expType
	} else if (unitExp.convert || unitExp.drop) {
		val targetType = unitExp.unit.eContainer as UnitsType
		if (expType instanceof NumberType) {
			if (expType.unitsType === null) {
				fail
					error 'typing: expression has no unit'
					source unitExp.expression
			}
			G |- expType.unitsType ~~ targetType
			or
			{
				fail
					error 'typing: cannot convert ' + stringRep(expType) + ' to ' + stringRep(targetType)
					source CommonPackage.eINSTANCE.AUnitExpression_Convert
			}
			val result = 
					if (expType instanceof AadlInteger) 
						Aadl2Factory.eINSTANCE.createAadlInteger
					else
						Aadl2Factory.eINSTANCE.createAadlReal
			if (unitExp.convert) {
				result.referencedUnitsType = unitExp.unit.eContainer as UnitsType
			}
			type = result
		} else {
			fail
				error 'typing: can only convert unit of a numeric type'
				source unitExp
				feature CommonPackage.eINSTANCE.AUnitExpression_Convert
		}
	} else {
		if (expType instanceof NumberType) {
			if (expType.unitsType !== null) {
				fail
					error 'typing: expression already has a unit'
					source unitExp.expression
			}
			val result = 
					if (expType instanceof AadlInteger) 
						Aadl2Factory.eINSTANCE.createAadlInteger
					else
						Aadl2Factory.eINSTANCE.createAadlReal
			result.referencedUnitsType = unitExp.unit.eContainer as UnitsType
			type = result
		} else {
			fail
				error 'typing: can only assign unit to a numeric type'
				source unitExp
				feature CommonPackage.eINSTANCE.AUnitExpression_Unit
		}
	}
}

// primitive types

axiom PropertyReference
	G |- APropertyReference ref : {
		val namedValue = ref.property
		switch (namedValue) {
			PropertyConstant: namedValue.propertyType
			Property: namedValue.propertyType
			default: {fail} // enumeration literal 
		}
	}

axiom ModelReference
	G |- AModelReference ref : CommonFactory.eINSTANCE.createModelRef

axiom IntegerLiteral
	G |- IntegerLiteral value : Aadl2Factory.eINSTANCE.createAadlInteger

axiom RealLiteral
	G |- RealLiteral value : Aadl2Factory.eINSTANCE.createAadlReal

axiom BooleanLiteral
	G |- BooleanLiteral bool : Aadl2Factory.eINSTANCE.createAadlBoolean

axiom StringLiteral
	G |- StringLiteral str : Aadl2Factory.eINSTANCE.createAadlString


// type equality

axiom sameBoolean
	G |- AadlBoolean l ~~ AadlBoolean r

axiom sameString
	G |- AadlString l ~~ AadlString r

axiom sameModelRef
	G |- ModelRef l ~~ ModelRef r

rule sameEnumeration
	G |- EnumerationType left ~~ EnumerationType right
from {
	left.qualifiedName().equals(right.qualifiedName())
}

rule sameNumber
	G |- NumberType left ~~ NumberType right
from {
	{
		left.unitsType === null && right.unitsType === null
	}
	or
	{
		left.unitsType !== null && right.unitsType !== null
		G |- left.unitsType ~~ right.unitsType
	}
}

rule sameRange
	G |- RangeType left ~~ RangeType right
from {
	G |- left.numberType ~~ right.numberType
}

rule sameList
	G |- ListType left ~~ ListType right
from {
	G |- left.elementType ~~ right.elementType
}

rule sameRecord
	G |- RecordType left ~~ RecordType right
from {
	G |= left.ownedFields ~~ right.ownedFields
}

rule sameTypeList
	G |= EList<BasicProperty> left ~~ EList<BasicProperty> right
from {
	(left.length !== right.length)
	for (var i = 0 ; i < left.length; i++) {		
		val l = left.get(i)
		val r = right.get(i)
		l.name.equals(r.name)
		l.isList() === r.isList()
		G |- l.propertyType ~~ r.propertyType
	}
}	


// type compatibility

rule ExpressionAssignableToType
	G |- AExpression exp|> PropertyType type
from {
	var PropertyType expType
	G |- exp : expType
	G |- expType <: type
	or {
		fail
			error previousFailure.issue
			source exp
	}
}

axiom PrimitiveString
	G |- AadlString left <: AadlString right

axiom PrimitiveBoolean
	G |- AadlBoolean left <: AadlBoolean right

rule PrimitiveNumber
	G |- NumberType left <: NumberType right
from {
	left.unitsType === right.unitsType
	left instanceof AadlInteger ||	right instanceof AadlReal
}

axiom ModelRef
	G |- ModelRef left <: ModelRef right

axiom ModelRef1
	G |- ModelRef left <: ReferenceType right

rule Range
	G |- RangeType left <: RangeType right
from {
	G |- left ~~ right
}

rule NotCompatible
	G |- PropertyType left <: PropertyType right
from {
	fail
}

// validation rules

checkrule CheckValDecls for 
	ValDeclaration valDecl
from {
 	empty |- valDecl.value : var PropertyType valueType
	if (valDecl.getType() !== null) {
	  empty |- valDecl : var PropertyType valType
 		empty |- valueType <: valType
  	or {
  		fail
  			error 'types not compatible: cannot assign ' + stringRep(valueType) + ' to ' + stringRep(valType)
  			source valDecl
  			feature CommonPackage.eINSTANCE.valDeclaration_Value
  	}
  }
}

checkrule CheckExpressions for
	PropertyExpression exp
from {
	empty |- exp : var PropertyType type
}

