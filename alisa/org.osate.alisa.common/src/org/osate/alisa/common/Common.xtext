/**
 * Copyright (c) 2004-2021 Carnegie Mellon University and others. (see Contributors file). 
 * All Rights Reserved.
 * 
 * NO WARRANTY. ALL MATERIAL IS FURNISHED ON AN "AS-IS" BASIS. CARNEGIE MELLON UNIVERSITY MAKES NO WARRANTIES OF ANY
 * KIND, EITHER EXPRESSED OR IMPLIED, AS TO ANY MATTER INCLUDING, BUT NOT LIMITED TO, WARRANTY OF FITNESS FOR PURPOSE
 * OR MERCHANTABILITY, EXCLUSIVITY, OR RESULTS OBTAINED FROM USE OF THE MATERIAL. CARNEGIE MELLON UNIVERSITY DOES NOT
 * MAKE ANY WARRANTY OF ANY KIND WITH RESPECT TO FREEDOM FROM PATENT, TRADEMARK, OR COPYRIGHT INFRINGEMENT.
 * 
 * This program and the accompanying materials are made available under the terms of the Eclipse Public License 2.0
 * which is available at https://www.eclipse.org/legal/epl-2.0/
 * SPDX-License-Identifier: EPL-2.0
 * 
 * Created, in part, with funding and support from the United States Government. (see Acknowledgments file).
 * 
 * This program includes and/or can make use of certain third party source code, object code, documentation and other
 * files ("Third Party Software"). The Third Party Software that is used by this program is dependent upon your system
 * configuration. By using this program, You agree to comply with any and all relevant Third Party Software terms and
 * conditions contained in any such Third Party Software or separate license file distributed with such Third Party
 * Software. The parties who own the Third Party Software ("Third Party Licensors") are intended third party benefici-
 * aries to this license with respect to the terms applicable to their Third Party Software. Third Party Software li-
 * censes only apply to the Third Party Software and not any other portion of this program or this program as a whole.
 */
grammar org.osate.alisa.common.Common 
with org.eclipse.xtext.common.Terminals

generate common "http://www.osate.org/alisa/common/Common"
import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://aadl.info/AADL/2.0" as aadl2
	
Description : 
	'description' description += DescriptionElement+
;

DescriptionElement :
 	text = STRING | =>thisTarget?='this'| =>image=ImageReference | showValue= ShowValue
 ;

Rationale: 'rationale' description += DescriptionElement+ ;


Uncertainty:
	{Uncertainty}'uncertainty' 
	'['
	(
		('volatility' volatility=INT)?
		&('precedence' precedence=INT)?
		&('impact' impact=INT)?
	)
	']'
;


TypeRef returns aadl2::PropertyType:
	{aadl2::AadlBoolean} 'boolean'
	| {aadl2::AadlInteger} 'integer' ('units' referencedUnitsType=[aadl2::UnitsType|AADLPROPERTYREFERENCE])?
	| {aadl2::AadlReal} 'real' ('units' referencedUnitsType=[aadl2::UnitsType|AADLPROPERTYREFERENCE])?
	| {aadl2::AadlString} 'string'
	| {ModelRef} 'model' 'element'
	| {TypeRef} ref=[aadl2::PropertyType|AADLPROPERTYREFERENCE]
;

PropertyRef returns aadl2::PropertyType:
	{PropertyRef} ref=[aadl2::Property|AADLPROPERTYREFERENCE]
;

ValDeclaration returns AVariableDeclaration:
	 {ValDeclaration} 'val' name=ID (':' (type=TypeRef | 'typeof' type=PropertyRef | range?='[' (type=TypeRef | 'typeof' type=PropertyRef) ']') )? '=' value=AExpression  
;

ComputeDeclaration returns AVariableDeclaration:
	{ComputeDeclaration}
	 'compute' name=ID ':' (type=TypeRef | 'typeof' type=PropertyRef | range?='[' (type=TypeRef | 'typeof' type=PropertyRef) ']')
;

// Reference to property, property constant, or model element.
AModelOrPropertyReference returns AExpression:
	AModelReference (=>({APropertyReference.modelElementReference=current} '#') property=[aadl2::AbstractNamedValue|AADLPROPERTYREFERENCE])? 
	| APropertyReference
;

AModelReference:
	modelElement=[aadl2::NamedElement|ThisKeyword] ({AModelReference.prev=current} '.' modelElement=[aadl2::NamedElement|ID])*
;

APropertyReference returns APropertyReference:
	{APropertyReference}'#' property=[aadl2::AbstractNamedValue|AADLPROPERTYREFERENCE]
;

AVariableReference returns AExpression:
	{AVariableReference} variable=[AVariableDeclaration|ID]
;


 
ShowValue returns AUnitExpression: //ref=[AVariableDeclaration|ID] ('%'|'in' unit=[aadl2::UnitLiteral|ID])?;	
	expression=AVariableReference ((convert?='%' | drop?='in') unit=[aadl2::UnitLiteral|ID])?
;

ImageReference : 'img' imgfile=IMGREF;

IMGREF : (ID '/')* ID '.' ID; 

// Expressions
enum Operation:
	OR='or' | ALT_OR='||'
	| AND='and' | ALT_AND='&&'
	| EQ='==' | NEQ='!='
	| GEQ='>=' | LEQ='<=' | GT='>' | LT='<' | IN='><'
	| PLUS='+' | MINUS='-'
	| MULT='*' | DIV='/' | INTDIV='div' | MOD='mod'
	| NOT='not'
;

AExpression returns aadl2::PropertyExpression: 
	AOrExpression
;

AOrExpression returns aadl2::PropertyExpression:
	AAndExpression (=>({ABinaryOperation.left=current} operator=OpOr) right=AAndExpression)*
;

OpOr returns Operation:
	'or' | '||'
;

AAndExpression returns aadl2::PropertyExpression:
	AEqualityExpression (=>({ABinaryOperation.left=current} operator=OpAnd) right=AEqualityExpression)*
;

OpAnd returns Operation:
	'and' | '&&'
;

AEqualityExpression returns aadl2::PropertyExpression:
	ARelationalExpression (=>({ABinaryOperation.left=current} operator=OpEquality) right=ARelationalExpression)*
;

OpEquality returns Operation:
	'==' | '!=' 
;

ARelationalExpression returns aadl2::PropertyExpression:
//	AOtherOperatorExpression
//	( =>({ABinaryOperation.leftOperand=current} feature=OpCompare) rightOperand=AOtherOperatorExpression)*;
	AAdditiveExpression ( =>({ABinaryOperation.left=current} operator=OpCompare) right=AAdditiveExpression)*
;

OpCompare returns Operation:
	'>=' | '<=' | '>' | '<' | '><'
;

//AOtherOperatorExpression returns aadl2::PropertyExpression:
//	AAdditiveExpression (=>({ABinaryOperation.leftOperand=current} feature=OpOther)
//	rightOperand=AAdditiveExpression)*;
//
//OpOther:
//	  '->' 
//	| '..<'
//	| '>' '..'
//	| '..'
//	| '=>' 
//	| '>' (=>('>' '>') | '>') 
//	| '<' (=>('<' '<') | '<' | '=>')
//	| '<>'
//	| '?:';

AAdditiveExpression returns aadl2::PropertyExpression:
	AMultiplicativeExpression (=>({ABinaryOperation.left=current} operator=OpAdd) right=AMultiplicativeExpression)*
;

OpAdd returns Operation:
	'+' | '-'
;

AMultiplicativeExpression returns aadl2::PropertyExpression:
	AUnaryOperation (=>({ABinaryOperation.left=current} operator=OpMulti) right=AUnaryOperation)*
;

OpMulti returns Operation:
	'*' | '/' | 'div' | 'mod'
;

AUnaryOperation returns aadl2::PropertyExpression:
	{AUnaryOperation} =>operator=OpUnary operand=AUnaryOperation | AUnitExpression
;

OpUnary returns Operation:
	"not" | "-" | "+"
;
AUnitExpression returns aadl2::PropertyExpression:
	APrimaryExpression ({AUnitExpression.expression=current} (convert?='%' | drop?='in')? unit=[aadl2::UnitLiteral|ID])?
;

APrimaryExpression returns aadl2::PropertyExpression:
	ALiteral | AVariableReference | AModelOrPropertyReference |  AFunctionCall | ARangeExpression | AIfExpression
	| AParenthesizedExpression
;

AFunctionCall returns aadl2::PropertyExpression:
	{AFunctionCall} function=QualifiedName '(' (arguments+=AExpression (',' arguments+=AExpression)*)? ')'
;

ARangeExpression returns aadl2::PropertyExpression:
	{ARange} '[' minimum=AExpression '..' maximum=AExpression (=> 'delta' delta=AExpression)? ']'
;

AIfExpression returns aadl2::PropertyExpression:
	{AConditional} 'if' if=AExpression 'then' then=AExpression ('else' else=AExpression)? 'endif'
;

ALiteral returns aadl2::PropertyExpression:
//	ASetTerm | AListTerm |
	ABooleanLiteral |
	ARealTerm | AIntegerTerm |
	StringTerm 
;

AIntegerTerm returns aadl2::IntegerLiteral:
	value=AInt
;

AInt returns aadl2::Integer:
	INT
;

ARealTerm returns aadl2::RealLiteral:
	value=AReal
;

AReal returns aadl2::Real:
	REAL_LIT
;

//ASetTerm returns aadl2::PropertyExpression:
//	{ASetLiteral}  '{' (elements+=AExpression (',' elements+=AExpression )*)? '}'
//;
//
//AListTerm returns aadl2::PropertyExpression:
//	{AListTerm} '[' (elements+=AExpression (',' elements+=AExpression )*)? ']'
//;

ABooleanLiteral returns aadl2::PropertyExpression :
	{aadl2::BooleanLiteral}(value?='true'|'false')
;


StringTerm returns aadl2::StringLiteral:
	value=NoQuoteString
;

NoQuoteString :
	// remove quotes from string in ValueConverter
	STRING
;

AParenthesizedExpression returns aadl2::PropertyExpression:
	'(' AExpression ')'
;

ComponentCategory returns aadl2::ComponentCategory: 'abstract' | 'bus'|'data'
	| 'device' | 'memory' | 'process' | 'processor' | 'subprogram'
	| 'subprogram' 'group' | 'system' | 'thread' 'group'
	| 'thread' | 'virtual' 'bus' | 'virtual' 'processor'
;


enum TargetType: COMPONENT='component'|FEATURE='feature'|CONNECTION='connection'|FLOW='flow'|MODE='mode'|ELEMENT='element'|ROOT='root';

terminal fragment
EXPONENT  :  ('e'|'E') ('+'|'-')? ( DIGIT )+  ;

terminal fragment
INT_EXPONENT :  ('e'|'E') ('+')? ( DIGIT )+ ;


terminal REAL_LIT : 	
	(DIGIT)+('_' (DIGIT)+)* ( '.' (DIGIT)+('_' (DIGIT)+)* ( EXPONENT )?)
  ;

//terminal INTEGER_LIT : 
//		(DIGIT)+('_' (DIGIT)+)*
//		(( '#' BASED_INTEGER  '#' ( INT_EXPONENT )? )
//			| (INT_EXPONENT)?
//		)
//  ;

terminal fragment
DIGIT     :  ( '0'..'9' ) ;

terminal fragment
EXTENDED_DIGIT     :  ( '0'..'9' | 'a'..'f' | 'A'..'F') ;

terminal fragment
BASED_INTEGER      :  ( EXTENDED_DIGIT ) ( ('_')? EXTENDED_DIGIT )* ;


// Qualified classifier reference
AadlClassifierReference:
	ID ('::' ID)+ ('.' ID)?;

AADLPROPERTYREFERENCE: ID ('::' ID)?;


URIID: STRING;

//terminal URIID : ('a'..'z'|'A'..'Z') ('a'..'z'|'A'..'Z'|'_'|'0'..'9'|'#'|'@'|'/'|':')*;

QualifiedName: ID ('.' ID)*;

ThisKeyword:
	'this'
;