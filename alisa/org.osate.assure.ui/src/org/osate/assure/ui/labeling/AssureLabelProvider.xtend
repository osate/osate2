/**
 * Copyright 2015 Carnegie Mellon University. All Rights Reserved.
 *
 * NO WARRANTY. THIS CARNEGIE MELLON UNIVERSITY AND SOFTWARE ENGINEERING INSTITUTE
 * MATERIAL IS FURNISHED ON AN "AS-IS" BASIS. CARNEGIE MELLON UNIVERSITY MAKES NO
 * WARRANTIES OF ANY KIND, EITHER EXPRESSED OR IMPLIED, AS TO ANY MATTER INCLUDING,
 * BUT NOT LIMITED TO, WARRANTY OF FITNESS FOR PURPOSE OR MERCHANTABILITY,
 * EXCLUSIVITY, OR RESULTS OBTAINED FROM USE OF THE MATERIAL. CARNEGIE MELLON
 * UNIVERSITY DOES NOT MAKE ANY WARRANTY OF ANY KIND WITH RESPECT TO FREEDOM FROM
 * PATENT, TRADEMARK, OR COPYRIGHT INFRINGEMENT.
 *
 * Released under the Eclipse Public License (http://www.eclipse.org/org/documents/epl-v10.php)
 *
 * See COPYRIGHT file for full details.
 */

/*
* generated by Xtext
*/
package org.osate.assure.ui.labeling

import com.google.inject.Inject
import org.eclipse.emf.edit.ui.provider.AdapterFactoryLabelProvider
import org.eclipse.xtext.ui.label.DefaultEObjectLabelProvider
import org.osate.assure.assure.AssuranceCaseResult
import org.osate.assure.assure.ClaimResult
import org.osate.assure.assure.ElseResult
import org.osate.assure.assure.ModelResult
import org.osate.assure.assure.PreconditionResult
import org.osate.assure.assure.SubsystemResult
import org.osate.assure.assure.ThenResult
import org.osate.assure.assure.ValidationResult
import org.osate.assure.assure.VerificationActivityResult
import org.osate.result.Diagnostic

import static extension org.osate.assure.util.AssureUtilExtension.*
import org.osate.result.DiagnosticType

/**
 * Provides labels for a EObjects.
 * 
 * see http://www.eclipse.org/Xtext/documentation.html#labelProvider
 */
class AssureLabelProvider extends DefaultEObjectLabelProvider {

	@Inject
	new(AdapterFactoryLabelProvider delegate) {
		super(delegate);
	}

	// Labels and icons can be computed like this:
	
	def text(ClaimResult ele) {
		"Claim "+ele.name +": "+ele.constructMessage
		+ ele.assureResultCounts
	}
	
	def text(VerificationActivityResult ele) {
		"Evidence "+ele.name + ": "+ ele.constructMessage 
		

	}
	def text(ValidationResult ele) {
		"Validation "+ele.name +": "+ ele.constructMessage 

	}
	def text(PreconditionResult ele) {
		"Precondition "+ele.name +": "+ ele.constructMessage 

	}
	
	def text(AssuranceCaseResult ele) {
		"Assurance case "+ele.name +": "+ele.constructMessage		
		+ ele.assureResultCounts
	}
	
	def text(ModelResult ele) {
		"Assurance plan "+ele.name +": "+ele.constructMessage		
		+ ele.assureResultCounts
	}
	
	def text(SubsystemResult ele) {
		"Subsystem verification "+ele.name +": "+ele.constructMessage		
		+ ele.assureResultCounts
	}
	
	def text(Diagnostic ele) {
		return ele.type.getName().toLowerCase.toFirstUpper+": "+(ele.sourceReference?.constructLabel?:"")+ ele.constructMessage
	}
	
	def text(ElseResult ele) {
		'else: '+ ele.assureResultCounts
	}
	def text(ThenResult ele) {
		'then: '+ ele.assureResultCounts
	}

	def image(Diagnostic ele) {
		switch(ele.type){
			case ERROR: 'error.png'
			case SUCCESS: 'valid.png'
			case WARNING: 'warning.png'
			case INFO: 'info.png'
			case FAILURE: 'invalid.png'
			case NONE: 'questionmark.png'
		}
	}
	
	
	def image(ClaimResult ele) {
		if (ele.isSuccessful) return 'valid.png'//'claimsuccess.png'
		if (ele.isFail) return 'invalid.png'//'validationfail.png'
		if (ele.isErrorTimeOut) return 'error.png'//'validationfail.png'
		if (ele.isZeroCount) return 'info.png'//'validationfail.png'
		return 'questionmark.png'//'claim.png'
	}
	
	def image(VerificationActivityResult ele) {
		if (ele.isSuccessful) return 'valid.png'//'evidencesuccess.png'
		if (ele.isFail) return 'invalid.png'//'validationfail.png'
		if (ele.isErrorTimeOut) return 'error.png'//'validationfail.png'
		if (ele.isZeroCount) return 'info.png'//'validationfail.png'
		return 'questionmark.png'//'evidence.png'
	}
	
	def image(PreconditionResult ele) {
		if (ele.isSuccessful) return 'valid.png'//'evidencesuccess.png'
		if (ele.isFail) return 'invalid.png'//'validationfail.png'
		if (ele.isErrorTimeOut) return 'error.png'//'validationfail.png'
		if (ele.isZeroCount) return 'info.png'//'validationfail.png'
		return 'questionmark.png'//'evidence.png'
	}
	
	def image(AssuranceCaseResult ele) {
		if (ele.isSuccessful) return 'valid.png'//'assuresuccess.png'
		if (ele.isFail) return 'invalid.png'//'validationfail.png'
		if (ele.isErrorTimeOut) return 'error.png'//'validationfail.png'
		if (ele.isZeroCount) return 'info.png'//'validationfail.png'
		return 'questionmark.png'//'assure.png'
	}
	
	def image(ModelResult ele) {
		if (ele.isSuccessful) return 'valid.png'//'assuresuccess.png'
		if (ele.isFail) return 'invalid.png'//'validationfail.png'
		if (ele.isErrorTimeOut) return 'error.png'//'validationfail.png'
		if (ele.isZeroCount) return 'info.png'//'validationfail.png'
		return 'questionmark.png'//'assure.png'
	}
	
	def image(SubsystemResult ele) {
		if (ele.isSuccessful) return 'valid.png'//'assuresuccess.png'
		if (ele.isFail) return 'invalid.png'//'validationfail.png'
		if (ele.isErrorTimeOut) return 'error.png'//'validationfail.png'
		if (ele.isZeroCount) return 'info.png'//'validationfail.png'
		return 'questionmark.png'//'assure.png'
	}
	
	def image(ValidationResult ele) {
		if (ele.isSuccessful) return 'valid.png'//'validationsuccess.png'
		if (ele.isFail) return 'invalid.png'//'validationfail.png'
		if (ele.isErrorTimeOut) return 'error.png'//'validationfail.png'
		if (ele.isZeroCount) return 'info.png'//'validationfail.png'
		return 'questionmark.png'//'validation.png'
	}
	
	def image(ThenResult ele) {
		if (ele.isSuccessful) return 'valid.png'
		if (ele.isFail) return 'invalid.png'//'validationfail.png'
		if (ele.isErrorTimeOut) return 'error.png'//'validationfail.png'
		if (ele.isZeroCount) return 'info.png'//'validationfail.png'
		return 'questionmark.png'
	}
	
	def image(ElseResult ele) {
		if (ele.isSuccessful) return 'valid.png'
		if (ele.isFail) return 'invalid.png'//'validationfail.png'
		if (ele.isErrorTimeOut) return 'error.png'//'validationfail.png'
		if (ele.isZeroCount) return 'info.png'//'validationfail.png'
		return 'questionmark.png'
	}
	
}
