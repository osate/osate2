module org.osate.xtext.aadl2.sandbox.GenerateSandbox

import org.eclipse.emf.mwe.utils.*
import org.eclipse.xtext.generator.*
import org.eclipse.xtext.ui.generator.*

var grammarURI = "classpath:/org/osate/xtext/aadl2/sandbox/Sandbox.xtext"
var file.extensions = "sbx"
var projectName = "org.osate.xtext.aadl2.sandbox"
var runtimeProject = "../${projectName}"

Workflow {
    bean = StandaloneSetup {
        scanClassPath = true
        platformUri = "${runtimeProject}/.."
//		registerGeneratedEPackage = "org.osate.aadl2.Aadl2Package"
//		registerGeneratedEPackage = "org.osate.aadl2.instance.InstancePackage"
		registerEcoreFile = "platform:/resource/org.osate.xtext.aadl2.sandbox/model/GenModel.ecore"
//		registerGenModelFile = "platform:/resource/org.osate.xtext.aadl2.errormodel/src-gen/org/osate/xtext/aadl2/errormodel/ErrorModel.genmodel"
		registerGenModelFile = "platform:/resource/org.osate.aadl2/model/aadl2.genmodel"
//		registerGenModelFile = "platform:/resource/org.osate.aadl2/model/instance.genmodel"
//		registerGenModelFile = "platform:/resource/org.osate.aadl2/model/UML.genmodel"
    }

    component = DirectoryCleaner {
        directory = "${runtimeProject}/src-gen"
    }

    component = DirectoryCleaner {
        directory = "${runtimeProject}.ui/src-gen"
    }

    component = Generator {
        pathRtProject = runtimeProject
        pathUiProject = "${runtimeProject}.ui"
        pathTestProject = "${runtimeProject}.tests"
        projectNameRt = projectName
        projectNameUi = "${projectName}.ui"
        language = {
            uri = grammarURI
            fileExtensions = file.extensions

            // Java API to access grammar elements (required by several other fragments)
            fragment = grammarAccess.GrammarAccessFragment {}

            // generates Java API for the generated EPackages
            fragment = ecore.EcoreGeneratorFragment {
//             referencedGenModels = "
//              platform:/resource/org.osate.aadl2/model/aadl2.genmodel,
//              platform:/resource/org.osate.aadl2/model/instance.genmodel,
//             "
            }

//            // Serializer 2.0
//            fragment = serializer.SerializerFragment {}
            
            // the serialization component (1.0)
             fragment = parseTreeConstructor.ParseTreeConstructorFragment {}

            // a custom ResourceFactory for use with EMF
            fragment = resourceFactory.ResourceFactoryFragment {
                fileExtensions = file.extensions
            }

            // The antlr parser generator fragment.
//            fragment = parser.antlr.XtextAntlrGeneratorFragment {
//            //  options = {
//            //      backtrack = true
//            //  }
//            }
			fragment = parser.antlr.ex.rt.AntlrGeneratorFragment {
    		options = {
        		ignoreCase = true
//					backtrack = true
//					classSplitting = true
    		}
			}

            // java-based API for validation
            fragment = validation.JavaValidatorFragment {
//                composedCheck = "org.eclipse.xtext.validation.ImportUriValidator"
                composedCheck = "org.eclipse.xtext.validation.NamesAreUniqueValidator"
            }

            // scoping and exporting API
            // fragment = scoping.ImportURIScopingFragment {}
            // fragment = exporting.SimpleNamesFragment {}

            // scoping and exporting API
            fragment = scoping.ImportNamespacesScopingFragment {}
            fragment = exporting.QualifiedNamesFragment {}
            fragment = builder.BuilderIntegrationFragment {}

            // generator API
            fragment = generator.GeneratorFragment {
                generateMwe = true
                generateJavaMain = true
            }

            // formatter API
            fragment = formatting.FormatterFragment {}

            // labeling API
            fragment = labeling.LabelProviderFragment {}

            // outline API
            fragment = outline.OutlineTreeProviderFragment {}
            fragment = outline.QuickOutlineFragment {}

            // quickfix API
            fragment = quickfix.QuickfixProviderFragment {}

            // content assist API
            fragment = contentAssist.JavaBasedContentAssistFragment {}

            // generates a more lightweight Antlr parser and lexer tailored for content assist
            fragment = parser.antlr.XtextAntlrUiGeneratorFragment {}
			fragment = parser.antlr.ex.ca.ContentAssistParserGeneratorFragment {
				    options = {
        		ignoreCase = true
    		}
//				options = {
//					classSplitting = true
//				}
			}

//            // generates junit test support classes into Generator#pathTestProject
//            fragment = junit.Junit4Fragment {}

            // project wizard (optional)
            // fragment = projectWizard.SimpleProjectWizardFragment {
            //      generatorProjectName = "${projectName}"
            //      modelFileExtension = file.extensions
            // }

//            // provides the necessary bindings for java types integration
//            fragment = types.TypesGeneratorFragment {}
//
//            // generates the required bindings only if the grammar inherits from Xbase
//            fragment = xbase.XbaseGeneratorFragment {}

            // provides a preference page for template proposals
            fragment = templates.CodetemplatesGeneratorFragment {}

            // rename refactoring
            fragment = refactoring.RefactorElementNameFragment {}

            // provides a compare view
            fragment = compare.CompareFragment {
                 fileExtensions = file.extensions
            }

        }
    }
}
