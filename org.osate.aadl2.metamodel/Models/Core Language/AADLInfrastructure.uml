<?xml version="1.0" encoding="UTF-8"?>
<xmi:XMI xmi:version="2.1" xmlns:xmi="http://schema.omg.org/spec/XMI/2.1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:Ecore="http://www.eclipse.org/uml2/schemas/Ecore/4" xmlns:Standard="http://www.eclipse.org/uml2/schemas/Standard/1" xmlns:ecore="http://www.eclipse.org/emf/2002/Ecore" xmlns:uml="http://www.eclipse.org/uml2/3.0.0/UML" xsi:schemaLocation="http://www.eclipse.org/uml2/schemas/Ecore/4 pathmap://UML_PROFILES/Ecore.profile.uml#_B7dOIMEREduRdatXodjBjA http://www.eclipse.org/uml2/schemas/Standard/1 pathmap://UML_PROFILES/Standard.profile.uml#_yzU58YinEdqtvbnfB2L_5w">
  <uml:Model xmi:id="_0" name="AADLInfrastructure">
    <ownedComment xmi:id="_ownedComment.0">
      <body>The AADL infrastructure model library contains general concepts that are not AADL-specific. Most of the classes are simplified versions of classes from the UML Infrastructure library.</body>
    </ownedComment>
    <packagedElement xmi:type="uml:Class" xmi:id="Element" name="Element" isAbstract="true">
      <ownedComment xmi:id="Element-_ownedComment.0" annotatedElement="Element">
        <body>An element is a constituent of a model.</body>
      </ownedComment>
      <ownedComment xmi:id="Element-_ownedComment.1" annotatedElement="Element">
        <body>An element is a constituent of a model. As such, it has the capability of owning other elements.</body>
      </ownedComment>
      <ownedRule xmi:id="Element-not_own_self" name="not_own_self" constrainedElement="Element">
        <ownedComment xmi:id="Element-not_own_self-_ownedComment.0" annotatedElement="Element-not_own_self">
          <body>An element may not directly or indirectly own itself.</body>
        </ownedComment>
        <specification xmi:type="uml:OpaqueExpression" xmi:id="Element-not_own_self-_specification">
          <language>OCL</language>
          <body>not self.allOwnedElements()->includes(self)</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="Element-has_owner" name="has_owner" constrainedElement="Element">
        <ownedComment xmi:id="Element-has_owner-_ownedComment.0" annotatedElement="Element-has_owner">
          <body>Elements that must be owned must have an owner.</body>
        </ownedComment>
        <specification xmi:type="uml:OpaqueExpression" xmi:id="Element-has_owner-_specification">
          <language>OCL</language>
          <body>self.mustBeOwned() implies owner->notEmpty()</body>
        </specification>
      </ownedRule>
      <ownedAttribute xmi:id="Element-ownedElement" name="ownedElement" type="Element" isReadOnly="true" isDerived="true" isDerivedUnion="true" aggregation="composite" association="A_ownedElement_owner">
        <eAnnotations xmi:id="Element-ownedElement-_http2F2Fwww.topcased.org2Fdocumentation" source="http://www.topcased.org/documentation">
          <details xmi:id="Element-ownedElement-_http2F2Fwww.topcased.org2Fdocumentation-_details.0" key="documentation" value="The Elements owned by this element."/>
        </eAnnotations>
        <ownedComment xmi:id="Element-ownedElement-_ownedComment.0" annotatedElement="Element-ownedElement">
          <body>The Elements owned by this element.</body>
        </ownedComment>
        <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="Element-ownedElement-_upperValue" value="*"/>
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="Element-ownedElement-_lowerValue"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="Element-ownedComment" name="ownedComment" type="Comment" aggregation="composite" subsettedProperty="Element-ownedElement" association="A_ownedComment_owningElement">
        <eAnnotations xmi:id="Element-ownedComment-_http2F2Fwww.topcased.org2Fdocumentation" source="http://www.topcased.org/documentation">
          <details xmi:id="Element-ownedComment-_http2F2Fwww.topcased.org2Fdocumentation-_details.0" key="documentation" value="The Comments owned by this element."/>
        </eAnnotations>
        <ownedComment xmi:id="Element-ownedComment-_ownedComment.0" annotatedElement="Element-ownedComment">
          <body>The Comments owned by this element.</body>
        </ownedComment>
        <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="Element-ownedComment-_upperValue" value="*"/>
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="Element-ownedComment-_lowerValue"/>
      </ownedAttribute>
      <ownedOperation xmi:id="Element-allOwnedElements" name="allOwnedElements" isQuery="true" bodyCondition="Element-allOwnedElements-spec">
        <ownedComment xmi:id="Element-allOwnedElements-_ownedComment.0" annotatedElement="Element-allOwnedElements">
          <body>The query allOwnedElements() gives all of the direct and indirect owned elements of an element.</body>
        </ownedComment>
        <ownedRule xmi:id="Element-allOwnedElements-spec" name="spec" constrainedElement="Element-allOwnedElements">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="Element-allOwnedElements-spec-_specification">
            <language>OCL</language>
            <body>ownedElement->union(ownedElement->collect(e | e.allOwnedElements()))</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="Element-allOwnedElements-_ownedParameter.0" type="Element" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="Element-allOwnedElements-_ownedParameter.0-_upperValue" value="*"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="Element-allOwnedElements-_ownedParameter.0-_lowerValue"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="Element-mustBeOwned" name="mustBeOwned" isQuery="true" bodyCondition="Element-mustBeOwned-spec">
        <ownedComment xmi:id="Element-mustBeOwned-_ownedComment.0" annotatedElement="Element-mustBeOwned">
          <body>The query mustBeOwned() indicates whether elements of this type must have an owner. Subclasses of Element that do not require an owner must override this operation.</body>
        </ownedComment>
        <ownedRule xmi:id="Element-mustBeOwned-spec" name="spec" constrainedElement="Element-mustBeOwned">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="Element-mustBeOwned-spec-_specification">
            <language>OCL</language>
            <body>true</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="Element-mustBeOwned-_ownedParameter.0" type="Boolean" direction="return"/>
      </ownedOperation>
    </packagedElement>
    <packagedElement xmi:type="uml:Association" xmi:id="A_ownedElement_owner" name="A_ownedElement_owner" memberEnd="Element-ownedElement Element-owner">
      <ownedEnd xmi:id="Element-owner" name="owner" type="Element" isReadOnly="true" isDerived="true" isDerivedUnion="true" association="A_ownedElement_owner">
        <eAnnotations xmi:id="Element-owner-_http2F2Fwww.topcased.org2Fdocumentation" source="http://www.topcased.org/documentation">
          <details xmi:id="Element-owner-_http2F2Fwww.topcased.org2Fdocumentation-_details.0" key="documentation" value="The Element that owns this element."/>
        </eAnnotations>
        <ownedComment xmi:id="Element-owner-_ownedComment.0" annotatedElement="Element-owner">
          <body>The Element that owns this element.</body>
        </ownedComment>
        <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="Element-owner-_upperValue" value="1"/>
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="Element-owner-_lowerValue"/>
      </ownedEnd>
    </packagedElement>
    <packagedElement xmi:type="uml:Association" xmi:id="A_ownedComment_owningElement" name="A_ownedComment_owningElement" memberEnd="Element-ownedComment A_ownedComment_owningElement-owningElement">
      <generalization xmi:id="A_ownedComment_owningElement-_generalization.0" general="A_ownedElement_owner"/>
      <ownedEnd xmi:id="A_ownedComment_owningElement-owningElement" name="owningElement" type="Element" subsettedProperty="Element-owner" association="A_ownedComment_owningElement">
        <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="A_ownedComment_owningElement-owningElement-_upperValue" value="1"/>
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_ownedComment_owningElement-owningElement-_lowerValue"/>
      </ownedEnd>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="Comment" name="Comment">
      <ownedComment xmi:id="Comment-_ownedComment.0" annotatedElement="Comment">
        <body>A comment is a textual annotation that can be attached to a set of elements.</body>
      </ownedComment>
      <generalization xmi:id="Comment-_generalization.0" general="Element"/>
      <ownedAttribute xmi:id="Comment-body" name="body" type="String">
        <eAnnotations xmi:id="Comment-body-_http2F2Fwww.topcased.org2Fdocumentation" source="http://www.topcased.org/documentation">
          <details xmi:id="Comment-body-_http2F2Fwww.topcased.org2Fdocumentation-_details.0" key="documentation" value="Specifies a string that is the comment"/>
        </eAnnotations>
        <ownedComment xmi:id="Comment-body-_ownedComment.0" annotatedElement="Comment-body">
          <body>Specifies a string that is the comment</body>
        </ownedComment>
        <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="Comment-body-_upperValue" value="1"/>
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="Comment-body-_lowerValue"/>
      </ownedAttribute>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="NamedElement" name="NamedElement" isAbstract="true">
      <ownedComment xmi:id="NamedElement-_ownedComment.0" annotatedElement="NamedElement">
        <body>A named element is an element in a model that may have a name.</body>
      </ownedComment>
      <ownedRule xmi:id="NamedElement-has_no_qualified_name" name="has_no_qualified_name" constrainedElement="NamedElement">
        <ownedComment xmi:id="NamedElement-has_no_qualified_name-_ownedComment.0" annotatedElement="NamedElement-has_no_qualified_name">
          <body>If there is no name, or one of the containing namespaces has no name, there is no qualified name.</body>
        </ownedComment>
        <specification xmi:type="uml:OpaqueExpression" xmi:id="NamedElement-has_no_qualified_name-_specification">
          <language>OCL</language>
          <body>(self.name->isEmpty() or self.allNamespaces()->select(ns | ns.name->isEmpty())->notEmpty()) implies self.qualifiedName->isEmpty()</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="NamedElement-has_qualified_name" name="has_qualified_name" constrainedElement="NamedElement">
        <ownedComment xmi:id="NamedElement-has_qualified_name-_ownedComment.0" annotatedElement="NamedElement-has_qualified_name">
          <body>When there is a name, and all of the containing namespaces have a name, the qualified name is constructed from the names of the containing namespaces.</body>
        </ownedComment>
        <specification xmi:type="uml:OpaqueExpression" xmi:id="NamedElement-has_qualified_name-_specification">
          <language>OCL</language>
          <body>(self.name->notEmpty() and self.allNamespaces()->select(ns | ns.name->isEmpty())->isEmpty()) &#xD;&#xA;implies &#xD;&#xA;self.qualifiedName = self.allNamespaces()->iterate(ns: Namespace; result: String = self.name | ns.name.concat(self.separator()).concat(result))</body>
        </specification>
      </ownedRule>
      <generalization xmi:id="NamedElement-_generalization.0" general="Element"/>
      <ownedAttribute xmi:id="NamedElement-name" name="name" type="String">
        <eAnnotations xmi:id="NamedElement-name-_http2F2Fwww.topcased.org2Fdocumentation" source="http://www.topcased.org/documentation">
          <details xmi:id="NamedElement-name-_http2F2Fwww.topcased.org2Fdocumentation-_details.0" key="documentation" value="The name of the NamedElement."/>
        </eAnnotations>
        <ownedComment xmi:id="NamedElement-name-_ownedComment.0" annotatedElement="NamedElement-name">
          <body>The name of the NamedElement.</body>
        </ownedComment>
        <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="NamedElement-name-_upperValue" value="1"/>
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="NamedElement-name-_lowerValue"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="NamedElement-qualifiedName" name="qualifiedName" type="String" isReadOnly="true" isDerived="true">
        <eAnnotations xmi:id="NamedElement-qualifiedName-_http2F2Fwww.topcased.org2Fdocumentation" source="http://www.topcased.org/documentation">
          <details xmi:id="NamedElement-qualifiedName-_http2F2Fwww.topcased.org2Fdocumentation-_details.0" key="documentation" value="A name which allows the NamedElement to be identified within a hierarchy of nested Namespaces. It is constructed from the names of the containing namespaces starting at the root of the hierarchy and ending with the name of the NamedElement itself."/>
        </eAnnotations>
        <ownedComment xmi:id="NamedElement-qualifiedName-_ownedComment.0" annotatedElement="NamedElement-qualifiedName">
          <body>A name which allows the NamedElement to be identified within a hierarchy of nested Namespaces. It is constructed from the names of the containing namespaces starting at the root of the hierarchy and ending with the name of the NamedElement itself.</body>
        </ownedComment>
        <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="NamedElement-qualifiedName-_upperValue" value="1"/>
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="NamedElement-qualifiedName-_lowerValue"/>
      </ownedAttribute>
      <ownedOperation xmi:id="NamedElement-allNamespaces" name="allNamespaces" isQuery="true" bodyCondition="NamedElement-allNamespaces-spec">
        <ownedComment xmi:id="NamedElement-allNamespaces-_ownedComment.0" annotatedElement="NamedElement-allNamespaces">
          <body>The query allNamespaces() gives the sequence of namespaces in which the NamedElement is nested, working outwards.</body>
        </ownedComment>
        <ownedRule xmi:id="NamedElement-allNamespaces-spec" name="spec" constrainedElement="NamedElement-allNamespaces">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="NamedElement-allNamespaces-spec-_specification">
            <language>OCL</language>
            <body>if self.namespace->isEmpty() then &#xD;&#xA;  Sequence{}&#xD;&#xA;else&#xD;&#xA;  self.namespace.allNamespaces()->prepend(self.namespace)&#xD;&#xA;endif</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="NamedElement-allNamespaces-_ownedParameter.0" type="Namespace" isOrdered="true" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="NamedElement-allNamespaces-_ownedParameter.0-_upperValue" value="*"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="NamedElement-allNamespaces-_ownedParameter.0-_lowerValue"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="NamedElement-isDistinguishableFrom" name="isDistinguishableFrom" isQuery="true" bodyCondition="NamedElement-isDistinguishableFrom-spec">
        <ownedComment xmi:id="NamedElement-isDistinguishableFrom-_ownedComment.0" annotatedElement="NamedElement-isDistinguishableFrom">
          <body>The query isDistinguishableFrom() determines whether two NamedElements may logically co-exist within a Namespace. By default, two named elements are distinguishable if (a) they have unrelated types or (b) they have related types but different names.</body>
        </ownedComment>
        <ownedRule xmi:id="NamedElement-isDistinguishableFrom-spec" name="spec" constrainedElement="NamedElement-isDistinguishableFrom">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="NamedElement-isDistinguishableFrom-spec-_specification">
            <language>OCL</language>
            <body>if self.oclIsKindOf(n.oclType) or n.oclIsKindOf(self.oclType) then&#xD;&#xA;  ns.getNamesOfMember(self)->intersection(ns.getNamesOfMember(n))->isEmpty()&#xD;&#xA;else&#xD;&#xA;  true&#xD;&#xA;endif</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="NamedElement-isDistinguishableFrom-_ownedParameter.0" type="Boolean" direction="return"/>
        <ownedParameter xmi:id="NamedElement-isDistinguishableFrom-n" name="n" type="NamedElement"/>
        <ownedParameter xmi:id="NamedElement-isDistinguishableFrom-ns" name="ns" type="Namespace"/>
      </ownedOperation>
      <ownedOperation xmi:id="NamedElement-separator" name="separator" isQuery="true" bodyCondition="NamedElement-separator-spec">
        <ownedComment xmi:id="NamedElement-separator-_ownedComment.0" annotatedElement="NamedElement-separator">
          <body>The query separator() gives the string that is used to separate names when constructing a qualified name.</body>
        </ownedComment>
        <ownedRule xmi:id="NamedElement-separator-spec" name="spec" constrainedElement="NamedElement-separator">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="NamedElement-separator-spec-_specification">
            <language>OCL</language>
            <body>'.'</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="NamedElement-separator-_ownedParameter.0" type="String" direction="return"/>
      </ownedOperation>
      <ownedOperation xmi:id="NamedElement-qualifiedName.1" name="qualifiedName" isQuery="true" bodyCondition="NamedElement-qualifiedName.1-spec">
        <ownedComment xmi:id="NamedElement-qualifiedName.1-_ownedComment.0" annotatedElement="NamedElement-qualifiedName.1">
          <body>When there is a name, and all of the containing namespaces have a name, the qualified name is constructed from the names of the containing namespaces.</body>
        </ownedComment>
        <ownedRule xmi:id="NamedElement-qualifiedName.1-spec" name="spec" constrainedElement="NamedElement-qualifiedName.1 NamedElement-qualifiedName">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="NamedElement-qualifiedName.1-spec-_specification">
            <language>OCL</language>
            <body>if self.name->notEmpty() and self.allNamespaces()->select(ns | ns.name->isEmpty())->isEmpty() then&#xD;&#xA;  self.allNamespaces()->iterate(ns: Namespace; result: String = self.name | ns.name.concat(self.separator()).concat(result))&#xD;&#xA;else &#xD;&#xA;  '' &#xD;&#xA;endif</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="NamedElement-qualifiedName.1-_ownedParameter.0" type="String" direction="return"/>
      </ownedOperation>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="Namespace" name="Namespace" isAbstract="true">
      <ownedComment xmi:id="Namespace-_ownedComment.0" annotatedElement="Namespace">
        <body>A namespace is an element in a model that contains a set of named elements that can be identified by name.</body>
      </ownedComment>
      <ownedRule xmi:id="Namespace-members_distinguishable" name="members_distinguishable" constrainedElement="Namespace">
        <ownedComment xmi:id="Namespace-members_distinguishable-_ownedComment.0" annotatedElement="Namespace-members_distinguishable">
          <body>All the members of a Namespace are distinguishable within it.</body>
        </ownedComment>
        <specification xmi:type="uml:OpaqueExpression" xmi:id="Namespace-members_distinguishable-_specification">
          <language>OCL</language>
          <body>membersAreDistinguishable()</body>
        </specification>
      </ownedRule>
      <generalization xmi:id="Namespace-_generalization.0" general="NamedElement"/>
      <ownedAttribute xmi:id="Namespace-ownedMember" name="ownedMember" type="NamedElement" isReadOnly="true" isDerived="true" isDerivedUnion="true" aggregation="composite" subsettedProperty="Element-ownedElement Namespace-member" association="A_ownedMember_namespace">
        <eAnnotations xmi:id="Namespace-ownedMember-_http2F2Fwww.topcased.org2Fdocumentation" source="http://www.topcased.org/documentation">
          <details xmi:id="Namespace-ownedMember-_http2F2Fwww.topcased.org2Fdocumentation-_details.0" key="documentation" value="A collection of NamedElements owned by the Namespace."/>
        </eAnnotations>
        <ownedComment xmi:id="Namespace-ownedMember-_ownedComment.0" annotatedElement="Namespace-ownedMember">
          <body>A collection of NamedElements owned by the Namespace.</body>
        </ownedComment>
        <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="Namespace-ownedMember-_upperValue" value="*"/>
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="Namespace-ownedMember-_lowerValue"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="Namespace-member" name="member" type="NamedElement" isReadOnly="true" isDerived="true" isDerivedUnion="true" association="A_member_namespace">
        <eAnnotations xmi:id="Namespace-member-_http2F2Fwww.topcased.org2Fdocumentation" source="http://www.topcased.org/documentation">
          <details xmi:id="Namespace-member-_http2F2Fwww.topcased.org2Fdocumentation-_details.0" key="documentation" value="A collection of NamedElements identifiable within the Namespace, either by being owned or by being introduced by importing or inheritance."/>
        </eAnnotations>
        <ownedComment xmi:id="Namespace-member-_ownedComment.0" annotatedElement="Namespace-member">
          <body>A collection of NamedElements identifiable within the Namespace, either by being owned or by being introduced by importing or inheritance.</body>
        </ownedComment>
        <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="Namespace-member-_upperValue" value="*"/>
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="Namespace-member-_lowerValue"/>
      </ownedAttribute>
      <ownedOperation xmi:id="Namespace-getNamesOfMember" name="getNamesOfMember" isQuery="true" bodyCondition="Namespace-getNamesOfMember-spec">
        <ownedComment xmi:id="Namespace-getNamesOfMember-_ownedComment.0" annotatedElement="Namespace-getNamesOfMember">
          <body>The query getNamesOfMember() gives a set of all of the names that a member would have in a Namespace. In general a member can have multiple names in a Namespace if it is imported more than once with different aliases. Those semantics are specified by overriding the getNamesOfMember operation. The specification here simply returns a set containing a single name, or the empty set if no name.</body>
        </ownedComment>
        <ownedRule xmi:id="Namespace-getNamesOfMember-spec" name="spec" constrainedElement="Namespace-getNamesOfMember">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="Namespace-getNamesOfMember-spec-_specification">
            <language>OCL</language>
            <body>if member->includes(element) then&#xD;&#xA;  Set{}->including(element.name)&#xD;&#xA;else&#xD;&#xA;  Set{}&#xD;&#xA;endif</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="Namespace-getNamesOfMember-_ownedParameter.0" type="String" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="Namespace-getNamesOfMember-_ownedParameter.0-_upperValue" value="*"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="Namespace-getNamesOfMember-_ownedParameter.0-_lowerValue"/>
        </ownedParameter>
        <ownedParameter xmi:id="Namespace-getNamesOfMember-element" name="element" type="NamedElement"/>
      </ownedOperation>
      <ownedOperation xmi:id="Namespace-membersAreDistinguishable" name="membersAreDistinguishable" isQuery="true" bodyCondition="Namespace-membersAreDistinguishable-spec">
        <ownedComment xmi:id="Namespace-membersAreDistinguishable-_ownedComment.0" annotatedElement="Namespace-membersAreDistinguishable">
          <body>The Boolean query membersAreDistinguishable() determines whether all of the namespaces members are distinguishable within it.</body>
        </ownedComment>
        <ownedRule xmi:id="Namespace-membersAreDistinguishable-spec" name="spec" constrainedElement="Namespace-membersAreDistinguishable">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="Namespace-membersAreDistinguishable-spec-_specification">
            <language>OCL</language>
            <body>self.member->forAll( memb | self.member->excluding(memb)->forAll(other | memb.isDistinguishableFrom(other, self)))</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="Namespace-membersAreDistinguishable-_ownedParameter.0" type="Boolean" direction="return"/>
      </ownedOperation>
    </packagedElement>
    <packagedElement xmi:type="uml:Association" xmi:id="A_ownedMember_namespace" name="A_ownedMember_namespace" memberEnd="Namespace-ownedMember NamedElement-namespace">
      <generalization xmi:id="A_ownedMember_namespace-_generalization.0" general="A_ownedElement_owner"/>
      <generalization xmi:id="A_ownedMember_namespace-_generalization.1" general="A_member_namespace"/>
      <ownedEnd xmi:id="NamedElement-namespace" name="namespace" type="Namespace" isReadOnly="true" isDerived="true" isDerivedUnion="true" association="A_ownedMember_namespace">
        <eAnnotations xmi:id="NamedElement-namespace-_http2F2Fwww.topcased.org2Fdocumentation" source="http://www.topcased.org/documentation">
          <details xmi:id="NamedElement-namespace-_http2F2Fwww.topcased.org2Fdocumentation-_details.0" key="documentation" value="Specifies the namespace that owns the NamedElement."/>
        </eAnnotations>
        <ownedComment xmi:id="NamedElement-namespace-_ownedComment.0" annotatedElement="NamedElement-namespace">
          <body>Specifies the namespace that owns the NamedElement.</body>
        </ownedComment>
        <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="NamedElement-namespace-_upperValue" value="1"/>
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="NamedElement-namespace-_lowerValue"/>
      </ownedEnd>
    </packagedElement>
    <packagedElement xmi:type="uml:Association" xmi:id="A_member_namespace" name="A_member_namespace" memberEnd="Namespace-member A_member_namespace-namespace">
      <ownedEnd xmi:id="A_member_namespace-namespace" name="namespace" type="Namespace" association="A_member_namespace">
        <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="A_member_namespace-namespace-_upperValue" value="*"/>
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_member_namespace-namespace-_lowerValue"/>
      </ownedEnd>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="Type" name="Type" isAbstract="true">
      <ownedComment xmi:id="Type-_ownedComment.0" annotatedElement="Type">
        <body>A type constrains the values represented by a typed element.</body>
      </ownedComment>
      <generalization xmi:id="Type-_generalization.0" general="NamedElement"/>
      <ownedOperation xmi:id="Type-conformsTo" name="conformsTo" isQuery="true" bodyCondition="Type-conformsTo-spec">
        <ownedComment xmi:id="Type-conformsTo-_ownedComment.0" annotatedElement="Type-conformsTo">
          <body>The query conformsTo() gives true for a type that conforms to another. By default, two types do not conform to each other. This query is intended to be redefined for specific conformance situations.</body>
        </ownedComment>
        <ownedRule xmi:id="Type-conformsTo-spec" name="spec" constrainedElement="Type-conformsTo">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="Type-conformsTo-spec-_specification">
            <language>OCL</language>
            <body>result = false</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="Type-conformsTo-_ownedParameter.0" type="Boolean" direction="return"/>
        <ownedParameter xmi:id="Type-conformsTo-other" name="other" type="Type"/>
      </ownedOperation>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="TypedElement" name="TypedElement" isAbstract="true">
      <ownedComment xmi:id="TypedElement-_ownedComment.0" annotatedElement="TypedElement">
        <body>A typed element has a type.</body>
      </ownedComment>
      <generalization xmi:id="TypedElement-_generalization.0" general="NamedElement"/>
      <ownedAttribute xmi:id="TypedElement-type" name="type" type="Type" association="A_type_typedElement">
        <eAnnotations xmi:id="TypedElement-type-_http2F2Fwww.topcased.org2Fdocumentation" source="http://www.topcased.org/documentation">
          <details xmi:id="TypedElement-type-_http2F2Fwww.topcased.org2Fdocumentation-_details.0" key="documentation" value="The type of the TypedElement."/>
        </eAnnotations>
        <ownedComment xmi:id="TypedElement-type-_ownedComment.0" annotatedElement="TypedElement-type">
          <body>The type of the TypedElement.</body>
        </ownedComment>
        <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="TypedElement-type-_upperValue" value="1"/>
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="TypedElement-type-_lowerValue"/>
      </ownedAttribute>
    </packagedElement>
    <packagedElement xmi:type="uml:Association" xmi:id="A_type_typedElement" name="A_type_typedElement" memberEnd="TypedElement-type A_type_typedElement-typedElement">
      <ownedEnd xmi:id="A_type_typedElement-typedElement" name="typedElement" type="TypedElement" association="A_type_typedElement">
        <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="A_type_typedElement-typedElement-_upperValue" value="*"/>
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_type_typedElement-typedElement-_lowerValue"/>
      </ownedEnd>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="Relationship" name="Relationship" isAbstract="true">
      <ownedComment xmi:id="Relationship-_ownedComment.0" annotatedElement="Relationship">
        <body>Relationship is an abstract concept that specifies some kind of relationship between elements.</body>
      </ownedComment>
      <generalization xmi:id="Relationship-_generalization.0" general="Element"/>
      <ownedAttribute xmi:id="Relationship-relatedElement" name="relatedElement" type="Element" isReadOnly="true" isDerived="true" isDerivedUnion="true" association="A_relatedElement_relationship">
        <ownedComment xmi:id="Relationship-relatedElement-_ownedComment.0" annotatedElement="Relationship-relatedElement">
          <body>Specifies the elements related by the Relationship.</body>
        </ownedComment>
        <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="Relationship-relatedElement-_upperValue" value="*"/>
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="Relationship-relatedElement-_lowerValue" value="1"/>
      </ownedAttribute>
    </packagedElement>
    <packagedElement xmi:type="uml:Association" xmi:id="A_relatedElement_relationship" name="A_relatedElement_relationship" memberEnd="Relationship-relatedElement A_relatedElement_relationship-relationship">
      <ownedEnd xmi:id="A_relatedElement_relationship-relationship" name="relationship" type="Relationship" association="A_relatedElement_relationship">
        <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="A_relatedElement_relationship-relationship-_upperValue" value="*"/>
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_relatedElement_relationship-relationship-_lowerValue"/>
      </ownedEnd>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="DirectedRelationship" name="DirectedRelationship" isAbstract="true">
      <ownedComment xmi:id="DirectedRelationship-_ownedComment.0" annotatedElement="DirectedRelationship">
        <body>A directed relationship represents a relationship between a collection of source model elements and a collection of target model elements.</body>
      </ownedComment>
      <generalization xmi:id="DirectedRelationship-_generalization.0" general="Relationship"/>
      <ownedAttribute xmi:id="DirectedRelationship-source" name="source" type="Element" isReadOnly="true" isDerived="true" isDerivedUnion="true" subsettedProperty="Relationship-relatedElement" association="A_source_directedRelationship">
        <ownedComment xmi:id="DirectedRelationship-source-_ownedComment.0" annotatedElement="DirectedRelationship-source">
          <body>Specifies the sources of the DirectedRelationship.</body>
        </ownedComment>
        <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="DirectedRelationship-source-_upperValue" value="*"/>
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="DirectedRelationship-source-_lowerValue" value="1"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="DirectedRelationship-target" name="target" type="Element" isReadOnly="true" isDerived="true" isDerivedUnion="true" subsettedProperty="Relationship-relatedElement" association="A_target_directedRelationship">
        <ownedComment xmi:id="DirectedRelationship-target-_ownedComment.0" annotatedElement="DirectedRelationship-target">
          <body>Specifies the targets of the DirectedRelationship.</body>
        </ownedComment>
        <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="DirectedRelationship-target-_upperValue" value="*"/>
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="DirectedRelationship-target-_lowerValue" value="1"/>
      </ownedAttribute>
    </packagedElement>
    <packagedElement xmi:type="uml:Association" xmi:id="A_source_directedRelationship" name="A_source_directedRelationship" memberEnd="DirectedRelationship-source A_source_directedRelationship-relationship">
      <ownedEnd xmi:id="A_source_directedRelationship-relationship" name="relationship" type="DirectedRelationship" association="A_source_directedRelationship">
        <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="A_source_directedRelationship-relationship-_upperValue" value="*"/>
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_source_directedRelationship-relationship-_lowerValue"/>
      </ownedEnd>
    </packagedElement>
    <packagedElement xmi:type="uml:Association" xmi:id="A_target_directedRelationship" name="A_target_directedRelationship" memberEnd="DirectedRelationship-target A_target_directedRelationship-relationship">
      <ownedEnd xmi:id="A_target_directedRelationship-relationship" name="relationship" type="DirectedRelationship" association="A_target_directedRelationship">
        <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="A_target_directedRelationship-relationship-_upperValue" value="*"/>
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_target_directedRelationship-relationship-_lowerValue"/>
        <defaultValue xmi:type="uml:LiteralString" xmi:id="A_target_directedRelationship-relationship-_defaultValue" value=""/>
      </ownedEnd>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="Generalization" name="Generalization" isAbstract="true">
      <ownedComment xmi:id="Generalization-_ownedComment.0" annotatedElement="Generalization">
        <body>A generalization is a taxonomic relationship between a more general classifier and a more specific classifier. Each instance of the specific classifier is also an instance of the general classifier. Thus, the specific classifier indirectly has features of the more general classifier.</body>
      </ownedComment>
      <generalization xmi:id="Generalization-_generalization.0" general="DirectedRelationship"/>
      <ownedAttribute xmi:id="Generalization-specific" name="specific" type="Classifier" isDerived="true" subsettedProperty="DirectedRelationship-source Element-owner" association="A_generalization_specific">
        <ownedComment xmi:id="Generalization-specific-_ownedComment.0" annotatedElement="Generalization-specific">
          <body>References the specializing classifier in the Generalization relationship. </body>
        </ownedComment>
        <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="Generalization-specific-_upperValue" value="1"/>
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="Generalization-specific-_lowerValue" value="1"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="Generalization-general" name="general" type="Classifier" isReadOnly="true" isDerived="true" isDerivedUnion="true" subsettedProperty="DirectedRelationship-target" association="A_general_generalization">
        <ownedComment xmi:id="Generalization-general-_ownedComment.0" annotatedElement="Generalization-general">
          <body>References the general classifier in the Generalization relationship.</body>
        </ownedComment>
        <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="Generalization-general-_upperValue" value="1"/>
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="Generalization-general-_lowerValue" value="1"/>
      </ownedAttribute>
    </packagedElement>
    <packagedElement xmi:type="uml:Association" xmi:id="A_generalization_specific" name="A_generalization_specific" memberEnd="Classifier-generalization Generalization-specific"/>
    <packagedElement xmi:type="uml:Association" xmi:id="A_general_generalization" name="A_general_generalization" memberEnd="Generalization-general A_general_generalization-generalization">
      <ownedEnd xmi:id="A_general_generalization-generalization" name="generalization" type="Generalization" association="A_general_generalization">
        <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="A_general_generalization-generalization-_upperValue" value="*"/>
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_general_generalization-generalization-_lowerValue"/>
      </ownedEnd>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="Classifier" name="Classifier" isAbstract="true">
      <ownedComment xmi:id="Classifier-_ownedComment.0" annotatedElement="Classifier">
        <body>A classifier is a classification of instances - it describes a set of instances that have features in common.</body>
      </ownedComment>
      <ownedComment xmi:id="Classifier-_ownedComment.1" annotatedElement="Classifier">
        <body>A classifier can specify a generalization hierarchy by referencing its general classifiers.</body>
      </ownedComment>
      <ownedRule xmi:id="Classifier-no_cycles_in_generalization" name="no_cycles_in_generalization" constrainedElement="Classifier">
        <ownedComment xmi:id="Classifier-no_cycles_in_generalization-_ownedComment.0" annotatedElement="Classifier-no_cycles_in_generalization">
          <body>Generalization hierarchies must be directed and acyclical. A classifier can not be both a transitively general and transitively specific classifier of the same classifier.</body>
        </ownedComment>
        <specification xmi:type="uml:OpaqueExpression" xmi:id="Classifier-no_cycles_in_generalization-_specification">
          <language>OCL</language>
          <body>not self.allParents()->includes(self)</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="Classifier-specialize_type" name="specialize_type" constrainedElement="Classifier">
        <ownedComment xmi:id="Classifier-specialize_type-_ownedComment.0" annotatedElement="Classifier-specialize_type">
          <body>A classifier may only specialize classifiers of a valid type.</body>
        </ownedComment>
        <specification xmi:type="uml:OpaqueExpression" xmi:id="Classifier-specialize_type-_specification">
          <language>OCL</language>
          <body>self.parents()->forAll(c | self.maySpecializeType(c))</body>
        </specification>
      </ownedRule>
      <generalization xmi:id="Classifier-_generalization.0" general="Type"/>
      <generalization xmi:id="Classifier-_generalization.1" general="Namespace"/>
      <ownedAttribute xmi:id="Classifier-classifierFeature" name="classifierFeature" type="ClassifierFeature" isReadOnly="true" isDerived="true" isDerivedUnion="true" subsettedProperty="Namespace-member" association="A_classifierFeature_featuringClassifier">
        <ownedComment xmi:id="Classifier-classifierFeature-_ownedComment.0" annotatedElement="Classifier-classifierFeature">
          <eAnnotations xmi:id="Classifier-classifierFeature-_ownedComment.0-_http2F2Fwww.topcased.org2Fdocumentation" source="http://www.topcased.org/documentation">
            <details xmi:id="Classifier-classifierFeature-_ownedComment.0-_http2F2Fwww.topcased.org2Fdocumentation-_details.0" key="documentation" value="Specifies each feature defined in the classifier."/>
          </eAnnotations>
          <body>Specifies each feature defined in the classifier.</body>
        </ownedComment>
        <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="Classifier-classifierFeature-_upperValue" value="*"/>
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="Classifier-classifierFeature-_lowerValue"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="Classifier-inheritedMember" name="inheritedMember" type="NamedElement" isReadOnly="true" isDerived="true" subsettedProperty="Namespace-member" association="A_classifier_inheritedMember">
        <ownedComment xmi:id="Classifier-inheritedMember-_ownedComment.0" annotatedElement="Classifier-inheritedMember">
          <eAnnotations xmi:id="Classifier-inheritedMember-_ownedComment.0-_http2F2Fwww.topcased.org2Fdocumentation" source="http://www.topcased.org/documentation">
            <details xmi:id="Classifier-inheritedMember-_ownedComment.0-_http2F2Fwww.topcased.org2Fdocumentation-_details.0" key="documentation" value="Specifies all elements inherited by this classifier from the general classifiers."/>
          </eAnnotations>
          <body>Specifies all elements inherited by this classifier from the general classifiers.</body>
        </ownedComment>
        <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="Classifier-inheritedMember-_upperValue" value="*"/>
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="Classifier-inheritedMember-_lowerValue"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="Classifier-generalization" name="generalization" type="Generalization" isReadOnly="true" isDerived="true" isDerivedUnion="true" subsettedProperty="Element-ownedElement" association="A_generalization_specific">
        <ownedComment xmi:id="Classifier-generalization-_ownedComment.0" annotatedElement="Classifier-generalization">
          <eAnnotations xmi:id="Classifier-generalization-_ownedComment.0-_http2F2Fwww.topcased.org2Fdocumentation" source="http://www.topcased.org/documentation">
            <details xmi:id="Classifier-generalization-_ownedComment.0-_http2F2Fwww.topcased.org2Fdocumentation-_details.0" key="documentation" value="Specifies the Generalization relationships for this Classifier. These Generalizations navigate to more general classifiers in the generalization hierarchy."/>
          </eAnnotations>
          <body>Specifies the Generalization relationships for this Classifier. These Generalizations navigate to more general classifiers in the generalization hierarchy.</body>
        </ownedComment>
        <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="Classifier-generalization-_upperValue" value="*"/>
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="Classifier-generalization-_lowerValue"/>
        <defaultValue xmi:type="uml:LiteralString" xmi:id="Classifier-generalization-_defaultValue" value=""/>
      </ownedAttribute>
      <ownedAttribute xmi:id="Classifier-general" name="general" type="Classifier" isReadOnly="true" isDerived="true" isDerivedUnion="true" association="A_general_classifier">
        <ownedComment xmi:id="Classifier-general-_ownedComment.0" annotatedElement="Classifier-general">
          <eAnnotations xmi:id="Classifier-general-_ownedComment.0-_http2F2Fwww.topcased.org2Fdocumentation" source="http://www.topcased.org/documentation">
            <details xmi:id="Classifier-general-_ownedComment.0-_http2F2Fwww.topcased.org2Fdocumentation-_details.0" key="documentation" value="Specifies the more general classifiers in the generalization hierarchy for this Classifier."/>
          </eAnnotations>
          <body>Specifies the more general classifiers in the generalization hierarchy for this Classifier.</body>
        </ownedComment>
        <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="Classifier-general-_upperValue" value="*"/>
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="Classifier-general-_lowerValue"/>
      </ownedAttribute>
      <ownedOperation xmi:id="Classifier-allFeatures" name="allFeatures" isQuery="true" bodyCondition="Classifier-allFeatures-spec">
        <ownedComment xmi:id="Classifier-allFeatures-_ownedComment.0" annotatedElement="Classifier-allFeatures">
          <body>The query allFeatures() gives all of the features in the namespace of the classifier. In general, through mechanisms such as inheritance, this will be a larger set than feature.</body>
        </ownedComment>
        <ownedRule xmi:id="Classifier-allFeatures-spec" name="spec" constrainedElement="Classifier-allFeatures">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="Classifier-allFeatures-spec-_specification">
            <language>OCL</language>
            <body>result = member->select(oclIsKindOf(Feature))</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="Classifier-allFeatures-_ownedParameter.0" type="ClassifierFeature" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="Classifier-allFeatures-_ownedParameter.0-_upperValue" value="*"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="Classifier-allFeatures-_ownedParameter.0-_lowerValue"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="Classifier-inheritedMember.1" name="inheritedMember" isQuery="true" bodyCondition="Classifier-inheritedMember.1-spec">
        <ownedComment xmi:id="Classifier-inheritedMember.1-_ownedComment.0" annotatedElement="Classifier-inheritedMember.1">
          <body>The inheritedMember association is derived by inheriting the inheritable members of the parents.</body>
        </ownedComment>
        <ownedRule xmi:id="Classifier-inheritedMember.1-spec" name="spec" constrainedElement="Classifier-inheritedMember.1 Classifier-inheritedMember">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="Classifier-inheritedMember.1-spec-_specification">
            <language>OCL</language>
            <body>result = self.inherit(self.parents()->collect(p | p.inheritableMembers(self))</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="Classifier-inheritedMember.1-_ownedParameter.0" type="NamedElement" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="Classifier-inheritedMember.1-_ownedParameter.0-_upperValue" value="*"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="Classifier-inheritedMember.1-_ownedParameter.0-_lowerValue"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="Classifier-parents" name="parents" isQuery="true" bodyCondition="Classifier-parents-spec">
        <ownedComment xmi:id="Classifier-parents-_ownedComment.0" annotatedElement="Classifier-parents">
          <body>The query parents() gives all of the immediate ancestors of a generalized Classifier.</body>
        </ownedComment>
        <ownedRule xmi:id="Classifier-parents-spec" name="spec" constrainedElement="Classifier-parents">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="Classifier-parents-spec-_specification">
            <language>OCL</language>
            <body>result = general</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="Classifier-parents-_ownedParameter.0" type="Classifier" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="Classifier-parents-_ownedParameter.0-_upperValue" value="*"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="Classifier-parents-_ownedParameter.0-_lowerValue"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="Classifier-allParents" name="allParents" isQuery="true" bodyCondition="Classifier-allParents-spec">
        <ownedComment xmi:id="Classifier-allParents-_ownedComment.0" annotatedElement="Classifier-allParents">
          <body>The query allParents() gives all of the direct and indirect ancestors of a generalized Classifier.</body>
        </ownedComment>
        <ownedRule xmi:id="Classifier-allParents-spec" name="spec" constrainedElement="Classifier-allParents">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="Classifier-allParents-spec-_specification">
            <language>OCL</language>
            <body>result = self.parents()->union(self.parents()->collect(p | p.allParents())</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="Classifier-allParents-_ownedParameter.0" type="Classifier" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="Classifier-allParents-_ownedParameter.0-_upperValue" value="*"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="Classifier-allParents-_ownedParameter.0-_lowerValue"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="Classifier-inheritableMembers" name="inheritableMembers" isQuery="true" precondition="Classifier-inheritableMembers-_ownedRule.0" bodyCondition="Classifier-inheritableMembers-spec">
        <ownedComment xmi:id="Classifier-inheritableMembers-_ownedComment.0" annotatedElement="Classifier-inheritableMembers">
          <body>The query inheritableMembers() gives all of the members of a classifier that may be inherited in one of its descendants, subject to whatever visibility restrictions apply.</body>
        </ownedComment>
        <ownedRule xmi:id="Classifier-inheritableMembers-_ownedRule.0" constrainedElement="Classifier-inheritableMembers">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="Classifier-inheritableMembers-_ownedRule.0-_specification">
            <language>OCL</language>
            <body>c.allParents()->includes(self)</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:id="Classifier-inheritableMembers-spec" name="spec" constrainedElement="Classifier-inheritableMembers">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="Classifier-inheritableMembers-spec-_specification">
            <language>OCL</language>
            <body>result = member->select(m | c.hasVisibilityOf(m))</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="Classifier-inheritableMembers-_ownedParameter.0" type="NamedElement" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="Classifier-inheritableMembers-_ownedParameter.0-_upperValue" value="*"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="Classifier-inheritableMembers-_ownedParameter.0-_lowerValue"/>
        </ownedParameter>
        <ownedParameter xmi:id="Classifier-inheritableMembers-c" name="c" type="Classifier"/>
      </ownedOperation>
      <ownedOperation xmi:id="Classifier-hasVisibilityOf" name="hasVisibilityOf" isQuery="true" precondition="Classifier-hasVisibilityOf-_ownedRule.0" bodyCondition="Classifier-hasVisibilityOf-spec">
        <ownedComment xmi:id="Classifier-hasVisibilityOf-_ownedComment.0" annotatedElement="Classifier-hasVisibilityOf">
          <body>The query hasVisibilityOf() determines whether a named element is visible in the classifier. By default all are visible. It is only called when the argument is something owned by a parent.</body>
        </ownedComment>
        <ownedRule xmi:id="Classifier-hasVisibilityOf-_ownedRule.0" constrainedElement="Classifier-hasVisibilityOf">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="Classifier-hasVisibilityOf-_ownedRule.0-_specification">
            <language>OCL</language>
            <body>self.allParents()->collect(c | c.member)->includes(n)</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:id="Classifier-hasVisibilityOf-spec" name="spec" constrainedElement="Classifier-hasVisibilityOf">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="Classifier-hasVisibilityOf-spec-_specification">
            <language>OCL</language>
            <body>result = if (self.inheritedMember->includes (n)) then (n.visibility &lt;> #private) else true</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="Classifier-hasVisibilityOf-_ownedParameter.0" type="Boolean" direction="return"/>
        <ownedParameter xmi:id="Classifier-hasVisibilityOf-n" name="n" type="NamedElement"/>
      </ownedOperation>
      <ownedOperation xmi:id="Classifier-inherit" name="inherit" isQuery="true" bodyCondition="Classifier-inherit-spec">
        <ownedComment xmi:id="Classifier-inherit-_ownedComment.0" annotatedElement="Classifier-inherit">
          <body>The query inherit() defines how to inherit a set of elements. Here the operation is defined to inherit them all. It is intended to be redefined in circumstances where inheritance is affected by redefinition.</body>
        </ownedComment>
        <ownedRule xmi:id="Classifier-inherit-spec" name="spec" constrainedElement="Classifier-inherit">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="Classifier-inherit-spec-_specification">
            <language>OCL</language>
            <body>result = inhs</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="Classifier-inherit-_ownedParameter.0" type="NamedElement" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="Classifier-inherit-_ownedParameter.0-_upperValue" value="*"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="Classifier-inherit-_ownedParameter.0-_lowerValue"/>
        </ownedParameter>
        <ownedParameter xmi:id="Classifier-inherit-inhs" name="inhs" type="NamedElement">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="Classifier-inherit-inhs-_upperValue" value="*"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="Classifier-inherit-inhs-_lowerValue"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="Classifier-maySpecializeType" name="maySpecializeType" isQuery="true" bodyCondition="Classifier-maySpecializeType-spec">
        <ownedComment xmi:id="Classifier-maySpecializeType-_ownedComment.0" annotatedElement="Classifier-maySpecializeType">
          <body>The query maySpecializeType() determines whether this classifier may have a generalization relationship to classifiers of the specified type. By default a classifier may specialize classifiers of the same or a more general type. It is intended to be redefined by classifiers that have different specialization constraints.</body>
        </ownedComment>
        <ownedRule xmi:id="Classifier-maySpecializeType-spec" name="spec" constrainedElement="Classifier-maySpecializeType">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="Classifier-maySpecializeType-spec-_specification">
            <language>OCL</language>
            <body>result = self.oclIsKindOf(c.oclType)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="Classifier-maySpecializeType-_ownedParameter.0" type="Boolean" direction="return"/>
        <ownedParameter xmi:id="Classifier-maySpecializeType-c" name="c" type="Classifier"/>
      </ownedOperation>
    </packagedElement>
    <packagedElement xmi:type="uml:Association" xmi:id="A_classifier_inheritedMember" name="A_classifier_inheritedMember" memberEnd="A_classifier_inheritedMember-_ownedEnd.0 Classifier-inheritedMember">
      <generalization xmi:id="A_classifier_inheritedMember-_generalization.0" general="A_member_namespace"/>
      <ownedEnd xmi:id="A_classifier_inheritedMember-_ownedEnd.0" type="Classifier" redefinedProperty="A_member_namespace-namespace" association="A_classifier_inheritedMember">
        <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="A_classifier_inheritedMember-_ownedEnd.0-_upperValue" value="*"/>
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_classifier_inheritedMember-_ownedEnd.0-_lowerValue"/>
      </ownedEnd>
    </packagedElement>
    <packagedElement xmi:type="uml:Association" xmi:id="A_general_classifier" name="A_general_classifier" memberEnd="Classifier-general A_general_classifier-classifier">
      <ownedEnd xmi:id="A_general_classifier-classifier" name="classifier" type="Classifier" association="A_general_classifier">
        <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="A_general_classifier-classifier-_upperValue" value="*"/>
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_general_classifier-classifier-_lowerValue"/>
      </ownedEnd>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="RefinableElement" name="RefinableElement" isAbstract="true">
      <ownedComment xmi:id="RefinableElement-_ownedComment.0" annotatedElement="RefinableElement-refinementContext">
        <body>A refinable element can be refined by another element. Refinement is limited to classifier features, which can be refined by a classifier feature of the same name in an extended classifier. A refining element can add detail to an incomplete declaration.</body>
      </ownedComment>
      <generalization xmi:id="RefinableElement-_generalization.0" general="NamedElement"/>
      <ownedAttribute xmi:id="RefinableElement-refinementContext" name="refinementContext" type="Classifier" isReadOnly="true" isDerived="true" isDerivedUnion="true" association="A_refinementContext_refinableElement">
        <ownedComment xmi:id="RefinableElement-refinementContext-_ownedComment.0" annotatedElement="RefinableElement-refinementContext">
          <body>References the contexts that this element may be redefined from.</body>
        </ownedComment>
        <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="RefinableElement-refinementContext-_upperValue" value="1"/>
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="RefinableElement-refinementContext-_lowerValue"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="RefinableElement-refinedElement" name="refinedElement" type="RefinableElement" isReadOnly="true" association="A_refiningElement_refinedElement">
        <ownedComment xmi:id="RefinableElement-refinedElement-_ownedComment.0" annotatedElement="RefinableElement-refinedElement">
          <body>The refinable element that is being refined by this element.</body>
        </ownedComment>
        <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="RefinableElement-refinedElement-_upperValue" value="1"/>
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="RefinableElement-refinedElement-_lowerValue"/>
      </ownedAttribute>
    </packagedElement>
    <packagedElement xmi:type="uml:Association" xmi:id="A_refinementContext_refinableElement" name="A_refinementContext_refinableElement" memberEnd="A_refinementContext_refinableElement-_ownedEnd.0 RefinableElement-refinementContext">
      <ownedEnd xmi:id="A_refinementContext_refinableElement-_ownedEnd.0" name="" type="RefinableElement" association="A_refinementContext_refinableElement">
        <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="A_refinementContext_refinableElement-_ownedEnd.0-_upperValue" value="*"/>
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_refinementContext_refinableElement-_ownedEnd.0-_lowerValue"/>
      </ownedEnd>
    </packagedElement>
    <packagedElement xmi:type="uml:Association" xmi:id="A_refiningElement_refinedElement" name="A_refiningElement_refinedElement" memberEnd="A_refiningElement_refinedElement-refiningElement RefinableElement-refinedElement">
      <ownedEnd xmi:id="A_refiningElement_refinedElement-refiningElement" name="refiningElement" type="RefinableElement" association="A_refiningElement_refinedElement">
        <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="A_refiningElement_refinedElement-refiningElement-_upperValue" value="*"/>
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="A_refiningElement_refinedElement-refiningElement-_lowerValue"/>
      </ownedEnd>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="ClassifierFeature" name="ClassifierFeature" isAbstract="true">
      <ownedComment xmi:id="ClassifierFeature-_ownedComment.0" annotatedElement="ClassifierFeature">
        <body>A classifier feature declares a behavioral or structural characteristic of instances of classifiers.</body>
      </ownedComment>
      <generalization xmi:id="ClassifierFeature-_generalization.0" general="NamedElement"/>
      <ownedAttribute xmi:id="ClassifierFeature-featuringClassifier" name="featuringClassifier" type="Classifier" isReadOnly="true" isDerived="true" isDerivedUnion="true" association="A_classifierFeature_featuringClassifier">
        <ownedComment xmi:id="ClassifierFeature-featuringClassifier-_ownedComment.0" annotatedElement="ClassifierFeature-featuringClassifier">
          <body>The Classifiers that have this ClassifierFeature as a feature.</body>
        </ownedComment>
        <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="ClassifierFeature-featuringClassifier-_upperValue" value="*"/>
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="ClassifierFeature-featuringClassifier-_lowerValue"/>
      </ownedAttribute>
    </packagedElement>
    <packagedElement xmi:type="uml:Association" xmi:id="A_classifierFeature_featuringClassifier" name="A_classifierFeature_featuringClassifier" memberEnd="Classifier-classifierFeature ClassifierFeature-featuringClassifier">
      <generalization xmi:id="A_classifierFeature_featuringClassifier-_generalization.0" general="A_member_namespace"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="StructuralFeature" name="StructuralFeature" isAbstract="true">
      <generalization xmi:id="StructuralFeature-_generalization.0" general="ClassifierFeature"/>
      <generalization xmi:id="StructuralFeature-_generalization.1" general="RefinableElement"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="BehavioralFeature" name="BehavioralFeature" isAbstract="true">
      <ownedComment xmi:id="BehavioralFeature-_ownedComment.0">
        <annotatedElement xmi:type="uml:Class" href="pathmap://UML_METAMODELS/UML.metamodel.uml#BehavioralFeature"/>
        <body>A behavioral feature is a feature of a classifier that specifies an aspect of the behavior of its instances.</body>
      </ownedComment>
      <generalization xmi:id="BehavioralFeature-_generalization.0" general="ClassifierFeature"/>
    </packagedElement>
    <packagedElement xmi:type="uml:PrimitiveType" xmi:id="Boolean" name="Boolean">
      <eAnnotations xmi:id="Boolean-_http2F2Fwww.topcased.org2Fdocumentation" source="http://www.topcased.org/documentation">
        <details xmi:id="Boolean-_http2F2Fwww.topcased.org2Fdocumentation-_details.0" key="documentation" value="A Boolean type is used for logical expression, consisting of the predefined values true and false."/>
      </eAnnotations>
    </packagedElement>
    <packagedElement xmi:type="uml:PrimitiveType" xmi:id="Integer" name="Integer">
      <eAnnotations xmi:id="Integer-_http2F2Fwww.topcased.org2Fdocumentation" source="http://www.topcased.org/documentation">
        <details xmi:id="Integer-_http2F2Fwww.topcased.org2Fdocumentation-_details.0" key="documentation" value="An integer is a primitive type representing integer values."/>
      </eAnnotations>
    </packagedElement>
    <packagedElement xmi:type="uml:PrimitiveType" xmi:id="String" name="String">
      <eAnnotations xmi:id="String-_http2F2Fwww.topcased.org2Fdocumentation" source="http://www.topcased.org/documentation">
        <details xmi:id="String-_http2F2Fwww.topcased.org2Fdocumentation-_details.0" key="documentation" value="A string is a sequence of characters in some suitable character set used to display information about the model. Character sets may include non-Roman alphabets and characters."/>
      </eAnnotations>
    </packagedElement>
    <packagedElement xmi:type="uml:PrimitiveType" xmi:id="Real" name="Real">
      <eAnnotations xmi:id="Real-_http2F2Fwww.topcased.org2Fdocumentation" source="http://www.topcased.org/documentation">
        <details xmi:id="Real-_http2F2Fwww.topcased.org2Fdocumentation-_details.0" key="documentation" value="A real is a primitive type representing real numeric values."/>
      </eAnnotations>
    </packagedElement>
    <profileApplication xmi:id="_profileApplication.0">
      <eAnnotations xmi:id="_profileApplication.0-_http2F2Fwww.eclipse.org2Fuml22F2.0.02FUML" source="http://www.eclipse.org/uml2/2.0.0/UML">
        <references xmi:type="ecore:EPackage" href="pathmap://UML_PROFILES/Ecore.profile.uml#_B7dOIMEREduRdatXodjBjA"/>
      </eAnnotations>
      <appliedProfile href="pathmap://UML_PROFILES/Ecore.profile.uml#_0"/>
    </profileApplication>
    <profileApplication xmi:id="_profileApplication.1">
      <eAnnotations xmi:id="_profileApplication.1-_http2F2Fwww.eclipse.org2Fuml22F2.0.02FUML" source="http://www.eclipse.org/uml2/2.0.0/UML">
        <references xmi:type="ecore:EPackage" href="pathmap://UML_PROFILES/Standard.profile.uml#_yzU58YinEdqtvbnfB2L_5w"/>
      </eAnnotations>
      <appliedProfile href="pathmap://UML_PROFILES/Standard.profile.uml#_0"/>
    </profileApplication>
  </uml:Model>
  <Standard:ModelLibrary xmi:id="_dyvaAPqBEdynZNrZDb_tIw" base_Package="_0"/>
  <Ecore:EReference xmi:id="_R4kdECwQEd2YZaDBJp0feQ" base_Property="ClassifierFeature-featuringClassifier" isResolveProxies="false"/>
</xmi:XMI>
