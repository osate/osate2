/* Created on Mar 21, 2006
 */
package org.osate.aadl2.modelsupport.errorreporting;

import org.eclipse.core.resources.IResource;

public final class ChainedParseErrorReporter extends AbstractParseErrorReporter {
	/** The error reporters to delegate to */
	private final ParseErrorReporter[] reporters;
	
	
	
	private ChainedParseErrorReporter(final ParseErrorReporter[] reporters) {
		this.reporters = reporters;
	}
	
	

	protected void errorImpl(String filename, int line, String message) {
		for (int i = 0; i < reporters.length; i++) {
			reporters[i].error(filename, line, message);
		}
	}

	protected void warningImpl(String filename, int line, String message) {
		for (int i = 0; i < reporters.length; i++) {
			reporters[i].warning(filename, line, message);
		}
	}

	protected void infoImpl(String filename, int line, String message) {
		for (int i = 0; i < reporters.length; i++) {
			reporters[i].info(filename, line, message);
		}
	}

	protected void deleteMessagesImpl() {
		for (int i = 0; i < reporters.length; i++) {
			reporters[i].deleteMessages();
		}
	}



	public static final class Factory implements ParseErrorReporterFactory {
		final ParseErrorReporterFactory[] factories;
		
		/**
		 * Create a new factory that creates an analysis error reporter that
		 * delegates to error reporters generated by the given list of
		 * factories.
		 * 
		 * @param factories
		 *            The factories to use to generate the delegates. This array
		 *            is referenced directly. The caller should not keep a
		 *            reference to it.
		 */
		public Factory(final ParseErrorReporterFactory[] factories) {
			this.factories = factories;
		}

		public ParseErrorReporter getReporterFor(IResource aadlRsrc) {
			final ParseErrorReporter[] reporters = 
				new ParseErrorReporter[factories.length];
			for (int i = 0; i < factories.length; i++) {
				reporters[i] = factories[i].getReporterFor(aadlRsrc);
			}
			return new ChainedParseErrorReporter(reporters);
		}
	}
}
