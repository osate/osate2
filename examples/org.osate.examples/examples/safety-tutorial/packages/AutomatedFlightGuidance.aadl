package AutomatedFlightGuidance
public
	with EMV2;

-- Flight guidance is an abstract system 
-- We may later decide to turn it into a software component that needs to bound to a processor.
-- We represents its failure potential by a error behavior state machine with
-- an occurrence probability on the error event.
	abstract FlightGuidance
		features
			InPort: in data port;
			OutPort: out data port;
		annex emv2 {**
			use types AFGErrorLibrary, GPSErrorLibrary;
			use behavior ErrorLibrary::FailStop;
			
			error propagations
				InPort: in propagation {NoService, LowPrecisionData, IncorrectData};
				OutPort: out propagation {NoService, LowPrecisionData, IncorrectData};
				flows
					noserviceflow: error path InPort {NoService} -> OutPort {NoService};
					valueflow: error path InPort {LowPrecisionData, IncorrectData} -> OutPort {LowPrecisionData, IncorrectData};
			end propagations;
			
			component error behavior
				propagations
					FailStop -[]-> OutPort {NoService};
			end component;
			
			properties
				emv2::OccurrenceDistribution => [ProbabilityValue => 4.5e-5; Distribution => Poisson;] applies to Failure;
		**};
	end FlightGuidance;

-- Autopilot is an abstract system 
-- We may later decide to turn it into a software component that needs to bound to a processor.
-- We represents its failure potential by a error behavior state machine with
-- an occurrence probability on the error event.
	abstract AutoPilot
		features
			InPort: in data port;
			OperatorCmd: in data port;
			OutPort: out data port;
		annex emv2 {**
			use types AFGErrorLibrary, GPSErrorLibrary;
			use behavior ErrorLibrary::FailStop;
			
			error propagations
				InPort: in propagation {NoService, LowPrecisionData, IncorrectData};
				OperatorCmd: in propagation {NoPilotInput, ErraticPilotInput};
				OutPort: out propagation {NoService, ErraticValue};
				flows
					noserviceflow: error path InPort {NoService} -> OutPort {NoService};
					valueflow: error path InPort {LowPrecisionData, IncorrectData} -> OutPort {ErraticValue};
					operatorflow: error path OperatorCmd {NoPilotInput} -> OutPort {NoService};
					operatorflowerratic: error path OperatorCmd {ErraticPilotInput} -> OutPort {ErraticValue};
			end propagations;
			
			component error behavior
				propagations
					FailStop -[]-> Outport {NoValue};
					Operational -[Inport {NoValue}]-> OutPort {NoValue};
			end component;
			
			properties
				emv2::OccurrenceDistribution => [ProbabilityValue => 6.5e-5; Distribution => Poisson;] applies to Failure;
		**};
	end AutoPilot;

-- The voter will be used in a configuration that replicates the flight guidance Autopilot pair 
-- the idea is to illustrate replicated channels and their allocation
-- to a two processor or three processor platform, which affects their reliability figures.
	abstract AFGVoter
		features
			FromAP1Port: in data port;
			FromAP2Port: in data port;
			OutPort: out data port;
		annex emv2 {**
			use types AFGErrorLibrary;
			use behavior ErrorLibrary::FailStop;
			
			error propagations
				FromAP1Port: in propagation {NoValue};
				FromAP2Port: in propagation {NoValue};
				OutPort: out propagation {NoValue};
			end propagations;
			
			component error behavior
				propagations
					FailStop -[]-> Outport {NoValue};
					Operational -[FromAP1Port {NoValue} and FromAP2Port {NoValue}]-> OutPort {NoValue};
			end component;
		**};
	end AFGVoter;

-- This is the system that takes GPS input and provides automated flight guidance.
-- In a manual  mode the pilot flies the aircraft directly.
-- thus, auto flight guidance operation can have a lower reliability target, since the
-- pilot is typically considered to be a reliable backup.
	system AutomatedFlightGuidance
		features
			position: in data port;
			operatorCommand: in data port;
			AFGOutput: out data port;
			powersupply: in feature;
		annex emv2 {**
			use types AFGErrorLibrary, GPSErrorLibrary;
			use behavior AFGErrorLibrary::ThreeState;
			
			error propagations
				position: in propagation {ServiceOmission, LowPrecisionData, IncorrectData}; --{ObservableErrorTypes};
				operatorCommand: in propagation {NoPilotInput, ErraticPilotInput};
				AFGOutput: out propagation {NoService, ErraticValue};
				powersupply: in propagation {NoService};
				flows
					AFGsource1: error source AFGOutput {ErraticValue} when NonCriticalModeFailure;
					-- fault tree to reflect FGS as error source.
					GPSPath: error path position {NoService} -> AFGOutput {NoService};
					GPSPath1: error sink position {LowPrecisionData};
					NoPilotPath: error path operatorCommand {NoPilotInput} -> AFGOutput {NoService};
					ErraticPilotPath: error path operatorCommand {ErraticPilotInput} -> AFGOutput {ErraticValue};
					epPower: error path powersupply {NoService} -> AFGOutput {NoService};
					AFGsource: error source AFGOutput {NoService} when CriticalModeFailure;
			end propagations;
			
			properties
				EMV2::hazards => ([crossreference => "1.1.3";
						failure => "Loss of automated flight guidance";
						phases => ("all");
						severity => ARP4761::Major;
						likelihood => ARP4761::Frequent;
						description => "Loss of automated flight guidance leads to manual flight control.";
						comment => "This becomes major hazard in critical flight situations.";
					]) applies to AFGsource;
				-- We specify the failure rate of AFG as the error source.
				-- external impact is accounted for separately.
				emv2::OccurrenceDistribution => [ProbabilityValue => 1.0e-9;
					Distribution => Poisson;] applies to AFGsource.NoService, CriticalModeFailure;
				emv2::OccurrenceDistribution => [ProbabilityValue => 2.4e-9;
					Distribution => Poisson;] applies to powersupply.NoService;
		**};
	end AutomatedFlightGuidance;

-- This is a functional implementation 
	system implementation AutomatedFlightGuidance.functional
		subcomponents
			AutoPilot: system AutoPilot;
			FlightGuidance: system FlightGuidance;
		connections
			AFGtoFG: port position -> FlightGuidance.inport;
			FGtoAP: port FlightGuidance.outport -> AutoPilot.inport;
			APtoAFG: port AutoPilot.outport -> AFGOutput;
			pilotinput: port operatorCommand -> AutoPilot.OperatorCmd;
		annex emv2 {**
			use types AFGErrorLibrary, GPSErrorLibrary;
			use behavior AFGErrorLibrary::ThreeState;
			
			error propagations
				bindings: out propagation {NoService};
				flows
					esource: error source bindings {NoService} when CriticalModeFailure;
					evote: error path position {ServiceOmission} -> AFGOutput {NoValue};
					evote2: error path position {LowPrecisionData, IncorrectData} -> AFGOutput {ErraticValue};
			end propagations;
			
			component error behavior
				propagations
					CriticalModeFailure -[]-> bindings {NoService};
			end component;
		**};
	end AutomatedFlightGuidance.functional;

-- to come: an implementation with a hardware platform
-- and a dual channel implementation.
-- This is to show the same points as the DualFGS example.
end AutomatedFlightGuidance;