package GPSParts
public
	with HardwareParts, emv2;

-- Has occurrence probability on error source for flow based FTA
-- and on state for composite state FTA 
-- The two values should be consistent 
	Device sensor
		features
			satelliteSignal: in feature;
			sensedData: out data port;
			networkaccess: requires bus access HardwareParts::Network;
			powersource: in feature;
		annex EMV2 {**
			use types ErrorLibrary, GPSErrorLibrary;
			use behavior ErrorLibrary::FailStop;
			
			error propagations
				satelliteSignal: in propagation {NoSignal, LowSignal};
				sensedData: out propagation {ServiceOmission};
				powersource: in propagation {ServiceOmission};
				networkaccess: in propagation {ServiceOmission};
				flows
					-- in this abstraction we have the sensor as error source due to internal failure
					-- The error paths represent the effect of incoming error proapgations on its output
					sensorfailsrc: error source sensedData {ServiceOmission} when {SensorFailure};
					satelliteimpact: error path satelliteSignal {NoSignal} -> sensedData {ServiceOmission};
					networkimpact: error path networkaccess {ServiceOmission} -> sensedData {ServiceOmission};
					powerimpact: error path powersource {ServiceOmission} -> sensedData {ServiceOmission};
			end propagations;
			
			--		component error behavior 
			--		propagations
			--		FailStop -[]-> sensedData{ServiceOmission};
			--		end component;
			properties
				emv2::OccurrenceDistribution => [ProbabilityValue => 2.5e-4;
					Distribution => Poisson;] applies to sensorfailsrc.ServiceOmission;
				emv2::OccurrenceDistribution => [ProbabilityValue => 2.5e-4; Distribution => Poisson;] applies to FailStop;
				emv2::OccurrenceDistribution => [ProbabilityValue => 2.5e-4; Distribution => Poisson;] applies to Failure;
			-- these incoming occurence values are documented assumptions
			-- they are used if no connection or binding existing with this as destination. Otherwise, the values from the origin are used. 
				emv2::OccurrenceDistribution => [ProbabilityValue => 3.5e-5;
					Distribution => Poisson;] applies to networkaccess.ServiceOmission;
				emv2::OccurrenceDistribution => [ProbabilityValue => 4.5e-5;
					Distribution => Poisson;] applies to powersource.ServiceOmission;
		**};
	end sensor;

-- Here we model transient and persistent failure behavior. 
-- At the moment EMFTA exporter does not interpret transition branches, thus, does not pick up the correct value.
	Device sensor_transient
		features
			sensedData: out data port;
			networkaccess: requires bus access HardwareParts::Network;
			powersource: in feature;
		annex EMV2 {**
			use types ErrorLibrary, GPSErrorLibrary;
			use behavior GPSErrorLibrary::FailStopTransient;
			
			error propagations
				sensedData: out propagation {ServiceOmission};
				powersource: in propagation {ServiceOmission};
				networkaccess: in propagation {ServiceOmission};
			end propagations;
			
			component error behavior
				transitions
					-- sensor failure may be transient. We assume a 20% persistent sensor failure rate.
					FailureTransition: Operational -[Failure]-> (FailStop with 0.2, Operational with 0.8);
				propagations
					SensorFailPropagation: FailStop -[]-> sensedData {ServiceOmission};
			end component;
			
			properties
				-- failure probability on error event must be consistent with probability on error source
				-- In our scenario the rate is higher, 
				-- but transient errors are filtered out according to the transition specification
				emv2::OccurrenceDistribution => [ProbabilityValue => 1.0e-4; Distribution => Poisson;] applies to Failure;
		**};
	end sensor_transient;

	-- This processing unit takes input from two sensors.
	-- This original specification has flows  only.
	-- Therefore, the flow-based FTA generation does not understand the relation of the two sensor inputs.
	-- The redundancy of the sensor input is specified in the extension below.
	abstract GPSProcessing
		features
			inSensor1: in data port;
			inSensor2: in data port;
			location: out data port;
		annex EMV2 {**
			use types ErrorLibrary, GPSErrorLibrary;
			
			error propagations
				inSensor1: in propagation {ServiceOmission};
				inSensor2: in propagation {ServiceOmission};
				location: out propagation {ServiceOmission, LowPrecisionData, IncorrectData};
				processor: in propagation {ServiceOmission, ValueError};
				flows
					s1toloc: error path inSensor1 {ServiceOmission} -> location {ServiceOmission};
					s2toloc: error path inSensor2 {ServiceOmission} -> location {ServiceOmission};
					ptoloc: error path processor {ServiceOmission} -> location {ServiceOmission};
					ptolocsink: error sink processor {ValueError};
					gpssrc: error source location {LowPrecisionData, IncorrectData};
			end propagations;
			
			properties
				emv2::OccurrenceDistribution => [ProbabilityValue => 2.8e-5;
					Distribution => Poisson;
				] applies to processor.ServiceOmission;
		**};
	end GPSProcessing;

	-- Here we use the OutGoingPropagationCondition to specify how the inputs map to the output (AND).
	-- In this specification we have no error behavior states yet.
	abstract GPSProcessing_redundancy extends GPSProcessing
		annex EMV2 {**
			use types ErrorLibrary, GPSErrorLibrary;
			
			component error behavior
				propagations
					outcond: all -[inSensor1 {ServiceOmission} and inSensor2 {ServiceOmission}]-> location {ServiceOmission};
			end component;
		**};
	end GPSProcessing_redundancy;

	-- specify sensor processing logic with an explicit error behavior state machine.
	-- We need this if we want to identify the FTA source to be an error state.
	-- in this case we need to map incoming propagations into a state.
	abstract GPSProcessing_redundancyState extends GPSProcessing
		annex EMV2 {**
			use types ErrorLibrary, GPSErrorLibrary;
			use behavior GPSErrorLibrary::FailStopState;
			
			component error behavior
				transitions
					input: Operational -[inSensor1 {ServiceOmission} and inSensor2 {ServiceOmission}]-> FailStop;
				propagations
					outcond: FailStop -[]-> location {ServiceOmission};
			end component;
		**};
	end GPSProcessing_redundancyState;

	-- specify sensor processing logic with an explicit error behavior state machine.
	-- We need this if we want to identify the FTA source as state.
	-- in this case we need to map both error events and incoming propagations into a state.
	abstract GPSProcessing_computeError extends GPSProcessing
		annex EMV2 {**
			use types ErrorLibrary, GPSErrorLibrary;
			use behavior GPSErrorLibrary::GPSProcessingFailed;
			
			component error behavior
				events
					computeError: error Event;
				transitions
					internal: Operational -[computeError]-> Incorrect;
					lowPrecision: Operational -[inSensor1 {ServiceOmission} or inSensor2 {ServiceOmission}]-> LowPrecision;
					inputNoService: all -[inSensor1 {ServiceOmission} and inSensor2 {ServiceOmission}]-> NoService;
					CPUNoService: all -[processor {ServiceOmission}]-> NoService;
				propagations
					outNoService: NoService -[]-> location {ServiceOmission};
					outLowPrecision: LowPrecision -[]-> location {LowPrecisionData};
					outComputeErrorEfect: Incorrect -[]-> location {IncorrectData};
			end component;
			
			properties
				emv2::OccurrenceDistribution => [ProbabilityValue => 7.5e-4;
					Distribution => Poisson;
				] applies to computeError;
		**};
	end GPSProcessing_computeError;

	-- This is a voter if the flight system is designed to use two instances of a GPS in order to achieve the desired reliability.
	abstract GPSVoter
		features
			inLocation1: in data port;
			inLocation2: in data port;
			outLocation: out data port;
		annex EMV2 {**
			use types ErrorLibrary, GPSErrorLibrary;
			use behavior GPSErrorLibrary::FailStopState;
			
			error propagations
				inLocation1: in propagation {ServiceOmission, LowPrecisionData, IncorrectData};
				inLocation2: in propagation {ServiceOmission, LowPrecisionData, IncorrectData};
				outLocation: out propagation {ServiceOmission, LowPrecisionData, IncorrectData};
				processor: in propagation {ServiceOmission, ValueError};
				flows
					s1toloc: error path inLocation1 -> outLocation;
					s2toloc: error path inLocation2 -> outLocation;
					ptoloc: error path processor {ServiceOmission} -> outLocation {ServiceOmission};
			end propagations;
			
			component error behavior
				events
					compareError: error Event;
				propagations
					-- used to be a single condition making use of expressions in ormore
					outcond1: all -[1 ormore (inLocation1 {ServiceOmission} and inLocation2 {ServiceOmission},
						processor {ServiceOmission})]-> outLocation {ServiceOmission};
					outcondlow1: all -[inLocation1 {ServiceOmission} or inLocation2 {ServiceOmission} or
						inLocation1 {LowPrecisionData} or inLocation2 {LowPrecisionData}]-> outLocation {LowPrecisionData};
					-- if we detect one incoming incorrect data we provide low precision data
					-- it is low precision either because we provide a previous value
					-- otherwise we would have to omit a value since the valu comparison does not tell us which one is incorrect.
					outcondincorrect1: all -[inLocation1 {IncorrectData} or
						inLocation2 {IncorrectData}]-> outLocation {LowPrecisionData};
					-- if it is a symmetric value error comparison will not detect it
					-- used to be a single condition making use of expressions in ormore
					outcondincorrect21: all -[compareError]-> outLocation {IncorrectData};
					outcondincorrect22: all -[inLocation1 {IncorrectData} and
						inLocation2 {IncorrectData}]-> outLocation {IncorrectData};
			end component;
			
			properties
				emv2::OccurrenceDistribution => [ProbabilityValue => 1.0e-7;
					Distribution => Poisson;] applies to FailStop, compareError;
		**};
	end GPSVoter;

end GPSParts;