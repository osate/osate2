-- This example illustrates several types of resource analysis.

package resourcebudgets
public
	with sei;

	data SensorData
		properties
			Data_Size => 2 KByte;
	end SensorData;

	data actuatecmd
		properties
			Data_Size => 100 Bytes;
	end actuatecmd;

	-- Threads for the first process
	thread sensor_sense_thread
		features
			signalout: out data port SensorData;
			signalin: in data port SensorData;
		properties
			Stack_Size => 10 Kbyte;
			Period => 20ms;
			Compute_Execution_Time => 10ms .. 12ms;
	end sensor_sense_thread;

	thread actuator_output_thread
		features
			controlin: in data port actuatecmd;
			actuate: out data port actuatecmd;
		properties
			Stack_Size => 10 Kbyte;
			Period => 20ms;
			Compute_Execution_Time => 8ms .. 10ms;
	end actuator_output_thread;

	--  Threads for the second process
	thread filterApp
		features
			sensorraw1: in data port SensorData;
			sensorraw2: in data port SensorData;
			sensorfiltered: out data port SensorData;
		properties
			Stack_Size => 25 Kbyte;
			Data_size => 250 KByte; -- for logging
			Period => 20ms;
			Compute_Execution_Time => 5ms .. 7ms;
	end filterApp;

	thread controlApp
		features
			sensorfiltered: in data port SensorData;
			actuatesensor: out data port actuatecmd;
		properties
			Stack_Size => 25 Kbyte;
			Data_size => 50 KByte; -- for control state
			Period => 20ms;
			Compute_Execution_Time => 2ms .. 6ms;
	end controlApp;

	-- Now, declare process that model partition address space
	process IOP
		features
			sensorin1: in data port SensorData;
			senseout1: out data port SensorData;
			sensorin2: in data port SensorData;
			senseout2: out data port SensorData;
			controlin: in event data port actuatecmd;
			actuatorout: out event data port actuatecmd;
		properties
			SEI::MIPSBudget => 0.8 mips;
	end IOP;

	process implementation IOP.impl
		subcomponents
			sense1: thread sensor_sense_thread;
			sense2: thread sensor_sense_thread;
			actuate: thread actuator_output_thread;
		connections
			incomingactuate: port controlin -> actuate.controlin;
			outgoingactuate: port actuate.actuate -> actuatorout;
			incomongsense1: port sensorin1 -> sense1.signalin;
			outgoingsense1: port sense1.signalout -> senseout1;
			incomongsense2: port sensorin2 -> sense2.signalin;
			outgoingsense2: port sense2.signalout -> senseout2;
	end IOP.impl;

	process APP
		features
			samplingin1: in data port SensorData;
			samplingin2: in data port SensorData;
			controlout: out data port actuatecmd;
		properties
			SEI::MIPSBudget => 0.7 mips;
	end APP;

	process implementation APP.impl
		subcomponents
			filter: thread filterApp;
			control: thread controlApp;
		connections
			filtertocontrol: port filter.sensorfiltered -> control.sensorfiltered;
			outgoing: port control.actuatesensor -> controlout;
			incoming1: port samplingin1 -> filter.sensorraw1;
			incoming2: port samplingin1 -> filter.sensorraw2;
	end APP.impl;

	-- computer hardware platform
	processor powerpc
		features
			power: in feature Electricity;
			cb: requires bus access CANbus;
			pci: requires bus access PCI;
		properties
			SEI::PowerBudget => 0.8w applies to power;
			SEI::MIPSCapacity => 1.2 mips;
			SEI::GrossWeight => 0.05kg;
	end powerpc;

	bus CANbus
		features
			power: in feature Electricity;
		properties
			SEI::PowerBudget => 0.8w applies to power;
			SEI::GrossWeight => 0.1kg;
			SEI::BandWidthCapacity => 200.0 KBytesps;
	end CANbus;

	bus PCI
		features
			power: in feature Electricity;
		properties
			SEI::PowerBudget => 0.4w applies to power;
			SEI::GrossWeight => 0.05kg;
			SEI::BandWidthCapacity => 20.0 MBytesps;
	end PCI;

	memory main_memory
		features
			power: in feature Electricity;
			pci: requires bus access PCI;
		properties
			SEI::PowerBudget => 0.8w applies to power;
			SEI::GrossWeight => 0.05kg;
	end main_memory;

	system DCA
		features
			sensor1in: in data port SensorData;
			sensor2In: in data port SensorData;
			actuatorOut: out data port actuatecmd;
		properties
			SEI::MIPSBudget => 2.0 mips;
	end DCA;

	system implementation DCA.tier1
		subcomponents
			iop: process IOP;
			app: process APP;
		connections
			sampledData1: port iop.senseout1 -> app.samplingin1;
			sampledData2: port iop.senseout2 -> app.samplingin2;
			controlData: port app.controlout -> iop.controlin;
			sense1: port sensor1in -> iop.sensorin1;
			sense2: port sensor2In -> iop.sensorin2;
	end DCA.tier1;

	system implementation DCA.tier2 extends DCA.tier1
		subcomponents
			iop: refined to process IOP.impl;
			app: refined to process APP.impl;
	end DCA.tier2;

	system platform
		features
			canbusaccess: provides bus access CANbus;
			power: in feature Electricity;
		properties
			SEI::PowerBudget => 0.8w applies to power;
			SEI::MIPSCapacity => 2.4 mips;
	end platform;

	system implementation platform.single
		subcomponents
			cpu: processor powerpc;
			ram: memory main_memory;
			canbus: bus CANbus;
			pci: bus PCI;
		connections
			p1: feature power -> cpu.power;
			p2: feature power -> ram.power;
			p3: feature power -> canbus.power;
			cb1: bus access canbus <-> cpu.cb;
			extcb: bus access canbus <-> canbusaccess;
			pci1: bus access pci <-> cpu.pci;
		properties
			SEI::NetWeight => 0.35kg;
	end platform.single;

	system implementation platform.dual
		subcomponents
			pc1: processor powerpc;
			pc2: processor powerpc;
			M: memory main_memory;
			canbus: bus CANbus;
			pcibus: bus PCI;
		connections
			p1: feature power -> pc1.power;
			p12: feature power -> pc2.power;
			p2: feature power -> M.power;
			p3: feature power -> canbus.power;
			cb1: bus access canbus <-> pc1.cb;
			cb2: bus access canbus <-> pc2.cb;
			extcb: bus access canbus <-> canbusaccess;
			pci1: bus access pc1.pci <-> pcibus;
			pci2: bus access pc2.pci <-> pcibus;
			pci3: bus access M.pci <-> pcibus;
		properties
			SEI::NetWeight => 0.35kg;
	end platform.dual;

	device sensor
		features
			power: in feature Electricity;
			canbusaccess: requires bus access CANbus;
			sensorout: out data port SensorData;
		properties
			SEI::GrossWeight => 0.18kg;
			SEI::PowerBudget => 0.45w applies to power;
			Period => 25ms;
			Dispatch_Protocol => Periodic;
	end sensor;

	device actuator
		features
			power: in feature Electricity;
			canbusaccess: requires bus access CANbus;
			actuatorin: in data port actuatecmd;
		properties
			SEI::GrossWeight => 0.3kg;
			SEI::PowerBudget => 0.8w applies to power;
			Period => 25ms;
			Dispatch_Protocol => Periodic;
	end actuator;

	system DCS
		features
			power: in feature Electricity;
			canbusaccess: provides bus access CANbus;
			sensor1in: in data port SensorData;
			sensor2In: in data port SensorData;
			actuatorOut: out data port actuatecmd;
	end DCS;

	system implementation DCS.singletier0
		subcomponents
			dca: system DCA;
			hw: system platform;
		connections
			p1: feature power -> hw.power;
			extcb: bus access hw.canbusaccess <-> canbusaccess;
			data1: port sensor1in -> dca.sensor1in;
			data2: port sensor2In -> dca.sensor2In;
			data3: port dca.actuatorOut -> actuatorOut;
	end DCS.singletier0;

	system implementation DCS.singletier1 extends DCS.singletier0
		subcomponents
			hw: refined to system platform.single;
		properties
			Reference_Processor => classifier (powerpc);
	end DCS.singletier1;

	system implementation DCS.singletier2 extends DCS.singletier1
		subcomponents
			dca: refined to system DCA.tier2;
		properties
			Actual_Processor_Binding => (reference (hw.cpu)) applies to dca.app.filter, dca.app.control;
			Actual_Processor_Binding => (reference (hw.cpu)) applies to dca.iop.sense1, dca.iop.sense2, dca.iop.actuate;
	end DCS.singletier2;

	system implementation DCS.dualtier2 extends DCS.singletier0
		subcomponents
			dca: refined to system DCA.tier2;
			hw: refined to system platform.dual;
		properties
			Reference_Processor => classifier (powerpc);
			Actual_Processor_Binding => (reference (hw.pc1)) applies to dca.app.filter, dca.app.control;
			Actual_Processor_Binding => (reference (hw.pc2)) applies to dca.iop.sense1, dca.iop.sense2, dca.iop.actuate;
			-- allocate SW connections to PCI bus. 
			Actual_Connection_Binding => (reference (hw.pcibus)) applies to dca.app.filtertocontrol;
			Actual_Connection_Binding => (
				reference (hw.pcibus)) applies to dca.sampledData1, dca.sampledData2, dca.controlData;
	end DCS.dualtier2;

	system SCS
		features
			power: in feature Electricity;
		properties
			SEI::PowerBudget => 2.5w applies to power;
			SEI::WeightLimit => 2.5kg;
	end SCS;

	system implementation SCS.tier0
		subcomponents
			dcs: system DCS.singletier0;
			sensor1: device sensor;
			sensor2: device sensor;
			actuator: device actuator;
		connections
			p1: feature power -> dcs.power;
			p2: feature power -> sensor1.power;
			p3: feature power -> sensor2.power;
			p4: feature power -> actuator.power;
			cb1: bus access dcs.canbusaccess <-> sensor1.canbusaccess;
			cb2: bus access dcs.canbusaccess <-> sensor2.canbusaccess;
			cb3: bus access dcs.canbusaccess <-> actuator.canbusaccess;
			data1: feature sensor1.sensorout -> dcs.sensor1in;
			data2: feature sensor2.sensorout -> dcs.sensor2In;
			data3: feature dcs.actuatorOut -> actuator.actuatorin;
	end SCS.tier0;

	system implementation SCS.tier1 extends SCS.tier0
		subcomponents
			dcs: refined to system DCS.singletier1;
		properties
			Actual_Connection_Binding => (reference (dcs.hw.CANbus)) applies to data1, data2, data3;
	end SCS.tier1;

	-- this configuration produces load on the CANbus.
	-- It also allows us to assess MIPS and memory budget allocations
	system implementation SCS.tier2 extends SCS.tier1
		subcomponents
			dcs: refined to system DCS.singletier2;
	end SCS.tier2;

	-- this configuration produces bandwidth demand on the CANbus and PCI bus.
	system implementation SCS.dualtier2 extends SCS.tier1
		subcomponents
			dcs: refined to system DCS.dualtier2;
	end SCS.dualtier2;

	abstract Electricity
	end Electricity;

	abstract Mass
	end Mass;

	system ElectrialPowerSupply
		features
			Supplier: out feature Electricity;
		properties
			SEI::GrossWeight => 1.2kg;
			SEI::PowerSupply => 40.0W applies to Supplier;
	end ElectrialPowerSupply;

	system ElectricGrid
		features
			Supplier: in feature Electricity;
			Consumer: out feature Electricity;
		properties
			SEI::GrossWeight => 0.9kg;
			SEI::PowerCapacity => 40.0W;
	end ElectricGrid;

	system MySystem

	end MySystem;

	-- use this as system root for electrical power consumption and weight
	system implementation MySystem.Tier0
		subcomponents
			EPSU: system ElectrialPowerSupply;
			Grid: system ElectricGrid;
			scs: system SCS.tier0;
		connections
			psupply: feature EPSU.Supplier -> Grid.Supplier;
			pconsume: feature Grid.Consumer -> scs.power;
		properties
			SEI::WeightLimit => 3.0kg;
	end MySystem.Tier0;

	-- use this as system root for electrical power consumption and weight
	system implementation MySystem.Tier2 extends MySystem.Tier0
		subcomponents
			scs: refined to system SCS.tier2;
	end MySystem.Tier2;

end resourcebudgets;