package impl::wbs
public

	with impl::bscu;
	with impl::communication;
	with impl::valves;
	with impl::wheel;
	with impl::pump;
	with impl::power;
	with impl::pedals;

	--
	--  Dummy component for the wheel brake system.
	--
	system wbs
	end wbs;

	system implementation wbs.generic
		subcomponents
			-- Pedal subsystem
			pedals: system impl::pedals::pedals.generic;

			-- Power subsystem
			power: system impl::power::power.generic;

			--  The two pumps at the top of the diagram
			blue_pump: system impl::pump::pump.i;
			green_pump: system impl::pump::pump.i;

			--  The accumulator pump
			accumulator: system impl::pump::pump.i;

			--  The selector subsystem
			selector: system impl::valves::selector;
			bscu: system impl::bscu::bscu.generic;

			wheel: system impl::wheel::wheel;

			-- Annunciation device
			annunciation: device impl::communication::annunciation.i;
		connections
			accu_to_sel: bus access selector.accumulator_input <-> accumulator.pressure_output;
			power1: bus access bscu.pwr1 <-> power.line1;
			power2: bus access power.line2 <-> bscu.pwr2;
			pedal1: port pedals.signal1 -> bscu.pedal1;
			pedal2: port pedals.signal2 -> bscu.pedal2;
		annex EMV2 {**
			-- The WBS system has the following error states:
			-- Operational
			-- AnnunciatedTotalBrakingLoss
			-- UnannunciatedTotalBrakingLoss
			-- PartialBrakingLoss
			-- AsymmetricLoss
			-- InadvertentBrake
			use types WBSImplementationErrorLib;
			use behavior WBSImplementationErrorLib::TwostateWBS;
			
			composite error behavior
				states
					[bscu.Failed and accumulator.Failed and annunciation.Failed]-> Failed {TotalWBLossUnanunciated};
					[blue_pump.Failed and green_pump.Failed and accumulator.Failed and
						annunciation.Failed]-> Failed {TotalWBLossUnanunciated};
					[bscu.Failed and accumulator.Failed and annunciation.Failed]-> Failed {TotalWBLossUnanunciated};
			
					[bscu.Failed and accumulator.Failed and annunciation.Operational]-> Failed {TotalWBLossAnunciated};
					[blue_pump.Failed and green_pump.Failed and accumulator.Failed and
						annunciation.Operational]-> Failed {TotalWBLossAnunciated};
					[bscu.Failed and accumulator.Failed and annunciation.Operational]-> Failed {TotalWBLossAnunciated};
			end composite;
		**};
	end wbs.generic;

	--  Basic/naive version that abstracts all the valves with
	--  a selector_subsystem. This selector subsystem hide
	--  the physical logic behind the selector, shutoff and meter/anti-skid
	--  valves.
	system implementation wbs.basic extends wbs.generic
		subcomponents
			bscu: refined to system impl::bscu::bscu.basic;
			--  The selector subsystem
			selector: refined to system impl::valves::selector_basic {Classifier_Substitution_Rule => Type_Extension;};
			wheel: refined to system impl::wheel::wheel_one_input.i {Classifier_Substitution_Rule => Type_Extension;};
		connections
			blue_to_selector: bus access blue_pump.pressure_output <-> selector.blue_input;
			green_to_selector: bus access green_pump.pressure_output <-> selector.green_input;

			bscu_sel_to_selector: port bscu.Select_Alternate -> selector.Select_Alternate;
			bscu_cmdnor_to_selector: port bscu.cmd_nor -> selector.cmd_nor;
			bscu_cmdalt_to_selector: port bscu.cmd_alt -> selector.cmd_alt;

			selector_to_wheel: bus access selector.output <-> wheel.input;
	end wbs.basic;

	--
	--  Version with more details of the implementation, showing detail
	--  about the hydraulic system.
	-- 
	system implementation wbs.detailed extends wbs.generic
		subcomponents
			selector: refined to system impl::valves::selector_detailed {
				Classifier_Substitution_Rule => Type_Extension;};
			shutoff: system impl::valves::boolean_shutoff;
			green_skid: system impl::valves::cmd_shutoff;
			blue_skid: system impl::valves::cmd_shutoff;
			wheel: refined to system impl::wheel::wheel_two_inputs.i {Classifier_Substitution_Rule => Type_Extension;};
		connections
			--  We connect the blue pump directly to the selector valve.
			--  For the green pump, we connect it to the shutoff valve that
			--  is later connected to the selector valve after. 
			blue_to_selector: bus access blue_pump.pressure_output <-> selector.blue_input;
			green_to_shutoff: bus access green_pump.pressure_output <-> shutoff.input;
			shutoff_to_selector: bus access shutoff.output <-> selector.green_input;
			bscu_to_shutoff: port bscu.Select_Alternate -> shutoff.boolean_input;

			bscu_to_selector: port bscu.Select_Alternate -> selector.select_alternate;

			--  Connect the command from the BSCU to the skid valves
			bscu_to_gskid: port bscu.cmd_nor -> green_skid.cmd_input;
			bscu_to_bskid: port bscu.cmd_alt -> blue_skid.cmd_input;

			--  Connect the output pressure from the selector
			--  to the anti-skid components
			selector_to_gskid: bus access selector.green_output <-> green_skid.input;
			selector_to_bskid: bus access selector.blue_output <-> blue_skid.input;

			--  Connect the anti-skid system to the wheel. In this version,
			--  we see the wheel as having two paths for getting the pressure.
			--  We see that as a physical model, not a logical one.
			bskid_to_wheel: bus access blue_skid.output <-> wheel.blue_input;
			gskid_to_wheel: bus access green_skid.output <-> wheel.green_input;
	end wbs.detailed;

	system implementation wbs.federated extends wbs.detailed
		subcomponents
			bscu: refined to system impl::bscu::bscu.federated;
	end wbs.federated;

	system implementation wbs.ima extends wbs.detailed
		subcomponents
			bscu: refined to system impl::bscu::bscu.ima;
	end wbs.ima;

end impl::wbs;