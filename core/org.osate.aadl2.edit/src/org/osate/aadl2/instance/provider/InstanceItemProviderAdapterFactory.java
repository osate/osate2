/**
 * Copyright (c) 2004-2021 Carnegie Mellon University and others. (see Contributors file).
 * All Rights Reserved.
 *
 * NO WARRANTY. ALL MATERIAL IS FURNISHED ON AN "AS-IS" BASIS. CARNEGIE MELLON UNIVERSITY MAKES NO WARRANTIES OF ANY
 * KIND, EITHER EXPRESSED OR IMPLIED, AS TO ANY MATTER INCLUDING, BUT NOT LIMITED TO, WARRANTY OF FITNESS FOR PURPOSE
 * OR MERCHANTABILITY, EXCLUSIVITY, OR RESULTS OBTAINED FROM USE OF THE MATERIAL. CARNEGIE MELLON UNIVERSITY DOES NOT
 * MAKE ANY WARRANTY OF ANY KIND WITH RESPECT TO FREEDOM FROM PATENT, TRADEMARK, OR COPYRIGHT INFRINGEMENT.
 *
 * This program and the accompanying materials are made available under the terms of the Eclipse Public License 2.0
 * which is available at https://www.eclipse.org/legal/epl-2.0/
 * SPDX-License-Identifier: EPL-2.0
 *
 * Created, in part, with funding and support from the United States Government. (see Acknowledgments file).
 *
 * This program includes and/or can make use of certain third party source code, object code, documentation and other
 * files ("Third Party Software"). The Third Party Software that is used by this program is dependent upon your system
 * configuration. By using this program, You agree to comply with any and all relevant Third Party Software terms and
 * conditions contained in any such Third Party Software or separate license file distributed with such Third Party
 * Software. The parties who own the Third Party Software ("Third Party Licensors") are intended third party benefici-
 * aries to this license with respect to the terms applicable to their Third Party Software. Third Party Software li-
 * censes only apply to the Third Party Software and not any other portion of this program or this program as a whole.
 */
package org.osate.aadl2.instance.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;
import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;
import org.osate.aadl2.instance.util.InstanceAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class InstanceItemProviderAdapterFactory extends InstanceAdapterFactory
		implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public InstanceItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.osate.aadl2.instance.FeatureInstance} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FeatureInstanceItemProvider featureInstanceItemProvider;

	/**
	 * This creates an adapter for a {@link org.osate.aadl2.instance.FeatureInstance}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createFeatureInstanceAdapter() {
		if (featureInstanceItemProvider == null) {
			featureInstanceItemProvider = new FeatureInstanceItemProvider(this);
		}

		return featureInstanceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.osate.aadl2.instance.PropertyAssociationInstance} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PropertyAssociationInstanceItemProvider propertyAssociationInstanceItemProvider;

	/**
	 * This creates an adapter for a {@link org.osate.aadl2.instance.PropertyAssociationInstance}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createPropertyAssociationInstanceAdapter() {
		if (propertyAssociationInstanceItemProvider == null) {
			propertyAssociationInstanceItemProvider = new PropertyAssociationInstanceItemProvider(this);
		}

		return propertyAssociationInstanceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.osate.aadl2.instance.ConnectionInstance} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ConnectionInstanceItemProvider connectionInstanceItemProvider;

	/**
	 * This creates an adapter for a {@link org.osate.aadl2.instance.ConnectionInstance}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createConnectionInstanceAdapter() {
		if (connectionInstanceItemProvider == null) {
			connectionInstanceItemProvider = new ConnectionInstanceItemProvider(this);
		}

		return connectionInstanceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.osate.aadl2.instance.SystemOperationMode} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SystemOperationModeItemProvider systemOperationModeItemProvider;

	/**
	 * This creates an adapter for a {@link org.osate.aadl2.instance.SystemOperationMode}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createSystemOperationModeAdapter() {
		if (systemOperationModeItemProvider == null) {
			systemOperationModeItemProvider = new SystemOperationModeItemProvider(this);
		}

		return systemOperationModeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.osate.aadl2.instance.ModeInstance} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ModeInstanceItemProvider modeInstanceItemProvider;

	/**
	 * This creates an adapter for a {@link org.osate.aadl2.instance.ModeInstance}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createModeInstanceAdapter() {
		if (modeInstanceItemProvider == null) {
			modeInstanceItemProvider = new ModeInstanceItemProvider(this);
		}

		return modeInstanceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.osate.aadl2.instance.ModeTransitionInstance} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ModeTransitionInstanceItemProvider modeTransitionInstanceItemProvider;

	/**
	 * This creates an adapter for a {@link org.osate.aadl2.instance.ModeTransitionInstance}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createModeTransitionInstanceAdapter() {
		if (modeTransitionInstanceItemProvider == null) {
			modeTransitionInstanceItemProvider = new ModeTransitionInstanceItemProvider(this);
		}

		return modeTransitionInstanceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.osate.aadl2.instance.ConnectionReference} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ConnectionReferenceItemProvider connectionReferenceItemProvider;

	/**
	 * This creates an adapter for a {@link org.osate.aadl2.instance.ConnectionReference}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createConnectionReferenceAdapter() {
		if (connectionReferenceItemProvider == null) {
			connectionReferenceItemProvider = new ConnectionReferenceItemProvider(this);
		}

		return connectionReferenceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.osate.aadl2.instance.ComponentInstance} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComponentInstanceItemProvider componentInstanceItemProvider;

	/**
	 * This creates an adapter for a {@link org.osate.aadl2.instance.ComponentInstance}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createComponentInstanceAdapter() {
		if (componentInstanceItemProvider == null) {
			componentInstanceItemProvider = new ComponentInstanceItemProvider(this);
		}

		return componentInstanceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.osate.aadl2.instance.FlowSpecificationInstance} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FlowSpecificationInstanceItemProvider flowSpecificationInstanceItemProvider;

	/**
	 * This creates an adapter for a {@link org.osate.aadl2.instance.FlowSpecificationInstance}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createFlowSpecificationInstanceAdapter() {
		if (flowSpecificationInstanceItemProvider == null) {
			flowSpecificationInstanceItemProvider = new FlowSpecificationInstanceItemProvider(this);
		}

		return flowSpecificationInstanceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.osate.aadl2.instance.EndToEndFlowInstance} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EndToEndFlowInstanceItemProvider endToEndFlowInstanceItemProvider;

	/**
	 * This creates an adapter for a {@link org.osate.aadl2.instance.EndToEndFlowInstance}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createEndToEndFlowInstanceAdapter() {
		if (endToEndFlowInstanceItemProvider == null) {
			endToEndFlowInstanceItemProvider = new EndToEndFlowInstanceItemProvider(this);
		}

		return endToEndFlowInstanceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.osate.aadl2.instance.SystemInstance} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SystemInstanceItemProvider systemInstanceItemProvider;

	/**
	 * This creates an adapter for a {@link org.osate.aadl2.instance.SystemInstance}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createSystemInstanceAdapter() {
		if (systemInstanceItemProvider == null) {
			systemInstanceItemProvider = new SystemInstanceItemProvider(this);
		}

		return systemInstanceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.osate.aadl2.instance.InstanceReferenceValue} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InstanceReferenceValueItemProvider instanceReferenceValueItemProvider;

	/**
	 * This creates an adapter for a {@link org.osate.aadl2.instance.InstanceReferenceValue}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createInstanceReferenceValueAdapter() {
		if (instanceReferenceValueItemProvider == null) {
			instanceReferenceValueItemProvider = new InstanceReferenceValueItemProvider(this);
		}

		return instanceReferenceValueItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>) type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (featureInstanceItemProvider != null) {
			featureInstanceItemProvider.dispose();
		}
		if (propertyAssociationInstanceItemProvider != null) {
			propertyAssociationInstanceItemProvider.dispose();
		}
		if (connectionInstanceItemProvider != null) {
			connectionInstanceItemProvider.dispose();
		}
		if (systemOperationModeItemProvider != null) {
			systemOperationModeItemProvider.dispose();
		}
		if (modeInstanceItemProvider != null) {
			modeInstanceItemProvider.dispose();
		}
		if (modeTransitionInstanceItemProvider != null) {
			modeTransitionInstanceItemProvider.dispose();
		}
		if (connectionReferenceItemProvider != null) {
			connectionReferenceItemProvider.dispose();
		}
		if (componentInstanceItemProvider != null) {
			componentInstanceItemProvider.dispose();
		}
		if (flowSpecificationInstanceItemProvider != null) {
			flowSpecificationInstanceItemProvider.dispose();
		}
		if (endToEndFlowInstanceItemProvider != null) {
			endToEndFlowInstanceItemProvider.dispose();
		}
		if (systemInstanceItemProvider != null) {
			systemInstanceItemProvider.dispose();
		}
		if (instanceReferenceValueItemProvider != null) {
			instanceReferenceValueItemProvider.dispose();
		}
	}

}
