/**
 * <copyright>
 * Copyright  2008 by Carnegie Mellon University, all rights reserved.
 *
 * Use of the Open Source AADL Tool Environment (OSATE) is subject to the terms of the license set forth
 * at http://www.eclipse.org/org/documents/epl-v10.html.
 *
 * NO WARRANTY
 *
 * ANY INFORMATION, MATERIALS, SERVICES, INTELLECTUAL PROPERTY OR OTHER PROPERTY OR RIGHTS GRANTED OR PROVIDED BY
 * CARNEGIE MELLON UNIVERSITY PURSUANT TO THIS LICENSE (HEREINAFTER THE ''DELIVERABLES'') ARE ON AN ''AS-IS'' BASIS.
 * CARNEGIE MELLON UNIVERSITY MAKES NO WARRANTIES OF ANY KIND, EITHER EXPRESS OR IMPLIED AS TO ANY MATTER INCLUDING,
 * BUT NOT LIMITED TO, WARRANTY OF FITNESS FOR A PARTICULAR PURPOSE, MERCHANTABILITY, INFORMATIONAL CONTENT,
 * NONINFRINGEMENT, OR ERROR-FREE OPERATION. CARNEGIE MELLON UNIVERSITY SHALL NOT BE LIABLE FOR INDIRECT, SPECIAL OR
 * CONSEQUENTIAL DAMAGES, SUCH AS LOSS OF PROFITS OR INABILITY TO USE SAID INTELLECTUAL PROPERTY, UNDER THIS LICENSE,
 * REGARDLESS OF WHETHER SUCH PARTY WAS AWARE OF THE POSSIBILITY OF SUCH DAMAGES. LICENSEE AGREES THAT IT WILL NOT
 * MAKE ANY WARRANTY ON BEHALF OF CARNEGIE MELLON UNIVERSITY, EXPRESS OR IMPLIED, TO ANY PERSON CONCERNING THE
 * APPLICATION OF OR THE RESULTS TO BE OBTAINED WITH THE DELIVERABLES UNDER THIS LICENSE.
 *
 * Licensee hereby agrees to defend, indemnify, and hold harmless Carnegie Mellon University, its trustees, officers,
 * employees, and agents from all claims or demands made against them (and any related losses, expenses, or
 * attorney's fees) arising out of, or relating to Licensee's and/or its sub licensees' negligent use or willful
 * misuse of or negligent conduct or willful misconduct regarding the Software, facilities, or other rights or
 * assistance granted by Carnegie Mellon University under this License, including, but not limited to, any claims of
 * product liability, personal injury, death, damage to property, or violation of any laws or regulations.
 *
 * Carnegie Mellon University Software Engineering Institute authored documents are sponsored by the U.S. Department
 * of Defense under Contract F19628-00-C-0003. Carnegie Mellon University retains copyrights in all material produced
 * under this contract. The U.S. Government retains a non-exclusive, royalty-free license to publish or reproduce these
 * documents, or allow others to do so, for U.S. Government purposes only pursuant to the copyright license
 * under the contract clause at 252.227.7013.
 * </copyright>
 *
 *
 * $Id: InstanceItemProviderAdapterFactory.java,v 1.6 2010-06-14 01:21:48 lwrage Exp $
 */
package org.osate.aadl2.instance.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;
import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;
import org.osate.aadl2.instance.util.InstanceAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class InstanceItemProviderAdapterFactory extends InstanceAdapterFactory
		implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public InstanceItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.osate.aadl2.instance.FeatureInstance} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FeatureInstanceItemProvider featureInstanceItemProvider;

	/**
	 * This creates an adapter for a {@link org.osate.aadl2.instance.FeatureInstance}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFeatureInstanceAdapter() {
		if (featureInstanceItemProvider == null) {
			featureInstanceItemProvider = new FeatureInstanceItemProvider(this);
		}

		return featureInstanceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.osate.aadl2.instance.PropertyAssociationInstance} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PropertyAssociationInstanceItemProvider propertyAssociationInstanceItemProvider;

	/**
	 * This creates an adapter for a {@link org.osate.aadl2.instance.PropertyAssociationInstance}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPropertyAssociationInstanceAdapter() {
		if (propertyAssociationInstanceItemProvider == null) {
			propertyAssociationInstanceItemProvider = new PropertyAssociationInstanceItemProvider(this);
		}

		return propertyAssociationInstanceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.osate.aadl2.instance.ConnectionInstance} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ConnectionInstanceItemProvider connectionInstanceItemProvider;

	/**
	 * This creates an adapter for a {@link org.osate.aadl2.instance.ConnectionInstance}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createConnectionInstanceAdapter() {
		if (connectionInstanceItemProvider == null) {
			connectionInstanceItemProvider = new ConnectionInstanceItemProvider(this);
		}

		return connectionInstanceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.osate.aadl2.instance.SystemOperationMode} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SystemOperationModeItemProvider systemOperationModeItemProvider;

	/**
	 * This creates an adapter for a {@link org.osate.aadl2.instance.SystemOperationMode}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSystemOperationModeAdapter() {
		if (systemOperationModeItemProvider == null) {
			systemOperationModeItemProvider = new SystemOperationModeItemProvider(this);
		}

		return systemOperationModeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.osate.aadl2.instance.ModeInstance} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ModeInstanceItemProvider modeInstanceItemProvider;

	/**
	 * This creates an adapter for a {@link org.osate.aadl2.instance.ModeInstance}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createModeInstanceAdapter() {
		if (modeInstanceItemProvider == null) {
			modeInstanceItemProvider = new ModeInstanceItemProvider(this);
		}

		return modeInstanceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.osate.aadl2.instance.ModeTransitionInstance} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ModeTransitionInstanceItemProvider modeTransitionInstanceItemProvider;

	/**
	 * This creates an adapter for a {@link org.osate.aadl2.instance.ModeTransitionInstance}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createModeTransitionInstanceAdapter() {
		if (modeTransitionInstanceItemProvider == null) {
			modeTransitionInstanceItemProvider = new ModeTransitionInstanceItemProvider(this);
		}

		return modeTransitionInstanceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.osate.aadl2.instance.ConnectionReference} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ConnectionReferenceItemProvider connectionReferenceItemProvider;

	/**
	 * This creates an adapter for a {@link org.osate.aadl2.instance.ConnectionReference}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createConnectionReferenceAdapter() {
		if (connectionReferenceItemProvider == null) {
			connectionReferenceItemProvider = new ConnectionReferenceItemProvider(this);
		}

		return connectionReferenceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.osate.aadl2.instance.ComponentInstance} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComponentInstanceItemProvider componentInstanceItemProvider;

	/**
	 * This creates an adapter for a {@link org.osate.aadl2.instance.ComponentInstance}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createComponentInstanceAdapter() {
		if (componentInstanceItemProvider == null) {
			componentInstanceItemProvider = new ComponentInstanceItemProvider(this);
		}

		return componentInstanceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.osate.aadl2.instance.FlowSpecificationInstance} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FlowSpecificationInstanceItemProvider flowSpecificationInstanceItemProvider;

	/**
	 * This creates an adapter for a {@link org.osate.aadl2.instance.FlowSpecificationInstance}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFlowSpecificationInstanceAdapter() {
		if (flowSpecificationInstanceItemProvider == null) {
			flowSpecificationInstanceItemProvider = new FlowSpecificationInstanceItemProvider(this);
		}

		return flowSpecificationInstanceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.osate.aadl2.instance.EndToEndFlowInstance} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EndToEndFlowInstanceItemProvider endToEndFlowInstanceItemProvider;

	/**
	 * This creates an adapter for a {@link org.osate.aadl2.instance.EndToEndFlowInstance}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEndToEndFlowInstanceAdapter() {
		if (endToEndFlowInstanceItemProvider == null) {
			endToEndFlowInstanceItemProvider = new EndToEndFlowInstanceItemProvider(this);
		}

		return endToEndFlowInstanceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.osate.aadl2.instance.SystemInstance} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SystemInstanceItemProvider systemInstanceItemProvider;

	/**
	 * This creates an adapter for a {@link org.osate.aadl2.instance.SystemInstance}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSystemInstanceAdapter() {
		if (systemInstanceItemProvider == null) {
			systemInstanceItemProvider = new SystemInstanceItemProvider(this);
		}

		return systemInstanceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.osate.aadl2.instance.InstanceReferenceValue} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InstanceReferenceValueItemProvider instanceReferenceValueItemProvider;

	/**
	 * This creates an adapter for a {@link org.osate.aadl2.instance.InstanceReferenceValue}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInstanceReferenceValueAdapter() {
		if (instanceReferenceValueItemProvider == null) {
			instanceReferenceValueItemProvider = new InstanceReferenceValueItemProvider(this);
		}

		return instanceReferenceValueItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>) type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void dispose() {
		if (featureInstanceItemProvider != null) {
			featureInstanceItemProvider.dispose();
		}
		if (propertyAssociationInstanceItemProvider != null) {
			propertyAssociationInstanceItemProvider.dispose();
		}
		if (connectionInstanceItemProvider != null) {
			connectionInstanceItemProvider.dispose();
		}
		if (systemOperationModeItemProvider != null) {
			systemOperationModeItemProvider.dispose();
		}
		if (modeInstanceItemProvider != null) {
			modeInstanceItemProvider.dispose();
		}
		if (modeTransitionInstanceItemProvider != null) {
			modeTransitionInstanceItemProvider.dispose();
		}
		if (connectionReferenceItemProvider != null) {
			connectionReferenceItemProvider.dispose();
		}
		if (componentInstanceItemProvider != null) {
			componentInstanceItemProvider.dispose();
		}
		if (flowSpecificationInstanceItemProvider != null) {
			flowSpecificationInstanceItemProvider.dispose();
		}
		if (endToEndFlowInstanceItemProvider != null) {
			endToEndFlowInstanceItemProvider.dispose();
		}
		if (systemInstanceItemProvider != null) {
			systemInstanceItemProvider.dispose();
		}
		if (instanceReferenceValueItemProvider != null) {
			instanceReferenceValueItemProvider.dispose();
		}
	}

}
