/**
 * Copyright (c) 2004-2021 Carnegie Mellon University and others. (see Contributors file). 
 * All Rights Reserved.
 * 
 * NO WARRANTY. ALL MATERIAL IS FURNISHED ON AN "AS-IS" BASIS. CARNEGIE MELLON UNIVERSITY MAKES NO WARRANTIES OF ANY
 * KIND, EITHER EXPRESSED OR IMPLIED, AS TO ANY MATTER INCLUDING, BUT NOT LIMITED TO, WARRANTY OF FITNESS FOR PURPOSE
 * OR MERCHANTABILITY, EXCLUSIVITY, OR RESULTS OBTAINED FROM USE OF THE MATERIAL. CARNEGIE MELLON UNIVERSITY DOES NOT
 * MAKE ANY WARRANTY OF ANY KIND WITH RESPECT TO FREEDOM FROM PATENT, TRADEMARK, OR COPYRIGHT INFRINGEMENT.
 * 
 * This program and the accompanying materials are made available under the terms of the Eclipse Public License 2.0
 * which is available at https://www.eclipse.org/legal/epl-2.0/
 * SPDX-License-Identifier: EPL-2.0
 * 
 * Created, in part, with funding and support from the United States Government. (see Acknowledgments file).
 * 
 * This program includes and/or can make use of certain third party source code, object code, documentation and other
 * files ("Third Party Software"). The Third Party Software that is used by this program is dependent upon your system
 * configuration. By using this program, You agree to comply with any and all relevant Third Party Software terms and
 * conditions contained in any such Third Party Software or separate license file distributed with such Third Party
 * Software. The parties who own the Third Party Software ("Third Party Licensors") are intended third party benefici-
 * aries to this license with respect to the terms applicable to their Third Party Software. Third Party Software li-
 * censes only apply to the Third Party Software and not any other portion of this program or this program as a whole.
 */
package org.osate.aadl2.modelsupport.errorreporting;

import org.eclipse.emf.ecore.resource.Resource;

public final class ChainedParseErrorReporter extends AbstractParseErrorReporter {
	/** The error reporters to delegate to */
	private final ParseErrorReporter[] reporters;

	private ChainedParseErrorReporter(final ParseErrorReporter[] reporters) {
		this.reporters = reporters;
	}

	@Override
	protected void errorImpl(String filename, int line, String message) {
		for (int i = 0; i < reporters.length; i++) {
			reporters[i].error(filename, line, message);
		}
	}

	@Override
	protected void warningImpl(String filename, int line, String message) {
		for (int i = 0; i < reporters.length; i++) {
			reporters[i].warning(filename, line, message);
		}
	}

	@Override
	protected void infoImpl(String filename, int line, String message) {
		for (int i = 0; i < reporters.length; i++) {
			reporters[i].info(filename, line, message);
		}
	}

	@Override
	protected void deleteMessagesImpl() {
		for (int i = 0; i < reporters.length; i++) {
			reporters[i].deleteMessages();
		}
	}

	public static final class Factory implements ParseErrorReporterFactory {
		final ParseErrorReporterFactory[] factories;

		/**
		 * Create a new factory that creates an analysis error reporter that
		 * delegates to error reporters generated by the given list of
		 * factories.
		 *
		 * @param factories
		 *            The factories to use to generate the delegates. This array
		 *            is referenced directly. The caller should not keep a
		 *            reference to it.
		 */
		public Factory(final ParseErrorReporterFactory[] factories) {
			this.factories = factories;
		}

		@Override
		public ParseErrorReporter getReporterFor(Resource aadlRsrc) {
			final ParseErrorReporter[] reporters = new ParseErrorReporter[factories.length];
			for (int i = 0; i < factories.length; i++) {
				reporters[i] = factories[i].getReporterFor(aadlRsrc);
			}
			return new ChainedParseErrorReporter(reporters);
		}
	}
}
