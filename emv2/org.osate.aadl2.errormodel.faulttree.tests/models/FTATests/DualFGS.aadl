package DualFGS
public

system FG
features
InPort: in data port;
OutPort: out data port;
annex emv2 {**
	use types FGSErrorModelLibrary;
  use behavior FGSErrorModelLibrary::Simple;        
	error propagations
	OutPort: out propagation {NoValue};
	end propagations;
	
component error behavior
    propagations  
       Failed-[]->Outport{NoValue};
   end component; 
	**};
end FG;
system AP
features
InPort: in data port;
OutPort: out data port;
annex emv2 {**
	use types FGSErrorModelLibrary;
  use behavior FGSErrorModelLibrary::Simple;        
	error propagations
	InPort: in propagation {NoValue};
	OutPort: out propagation {NoValue};
	end propagations;
	
component error behavior
    propagations  
      Failed-[]->Outport{NoValue};
      Operational -[Inport{NoValue}]-> OutPort{NoValue};
   end component; 
	**};
end AP;

system AC
features
FromAP1Port: in data port;
FromAP2Port: in data port;
OutPort: out data port;
annex emv2 {**
	use types FGSErrorModelLibrary;
  use behavior FGSErrorModelLibrary::Simple; 
	error propagations
	FromAP1Port: in propagation {NoValue};
	FromAP2Port: in propagation {NoValue};
	OutPort: out propagation {NoValue};
	end propagations;
	
component error behavior
    propagations  
      Failed-[]->Outport{NoValue};
      Operational -[FromAP1Port{NoValue} and FromAP2Port{NoValue}]-> OutPort{NoValue};
  end component;
	**};
end AC;


system FGS
features
inport : in data port;
outport: out data port;
powersupply : requires bus access PowerSupply;
 modes
Critical: mode;
NonCritical: initial mode;
annex emv2 {**
	use types FGSErrorModelLibrary;
  use behavior FGSErrorModelLibrary::ThreeState;
	error propagations
	inport: in propagation {NoValue};
	outport : out propagation {NoValue};
	powersupply: in propagation {NoService};
	flows
	esource: error source outport{NoValue} when CriticalModefailure;
	-- fault tree to reflect FGS as error source.
	ePath: error path inport{NoValue} -> outport{NoValue};
	epPower: error path powersupply{NoService} -> outport{NoValue};
	end propagations;
	**};
end FGS;

system implementation FGS.impl
subcomponents
AP1: system AP in modes (Critical);
AP2: system AP;
FG1: system FG in modes (Critical);
FG2: system FG;
AC: system AC;
network: bus EtherSwitch;
connections
FGStoFG1: port inport -> FG1.inport;
FGStoFG2: port inport -> FG2.inport;
FG1toAP1: port FG1.outport -> AP1.inport;
FG2toAP2: port FG1.outport -> AP2.inport;
AP1toAC: port AP1.outport -> AC.FromAP1Port;
AP2toAC: port AP2.outport -> AC.FromAP2Port;
ACtoFGS: port AC.outport -> outport;
properties
Actual_Connection_Binding => (reference (network)) 
  applies to FGStoFG1,FGStoFG2,FG1toAP1,FG2toAP2,AP1toAC,AP2toAC,ACtoFGS;
annex emv2 {**
  use types FGSErrorModelLibrary;        
  use behavior FGSErrorModelLibrary::ThreeState;
component error behavior 
transitions
	Operational -[powersupply{NoService}]-> CriticalModeFailure;
propagations
    Operational -[inport]-> outport{NoValue};
    CriticalModeFailure -[]-> outport{NoValue};
    NonCriticalModeFailure -[]-> outport{NoValue};
end component;
composite error behavior 
 states
    [all(AP1.Operational , AP2.Operational
 , FG1.Operational , FG2.Operational , AC.Operational , Network.Operational)]->Operational ;
    [AC.Operational and Network.Operational and
  ((1 ormore (FG1.Failed, AP1.Failed) and 
     FG2.Operational and AP2.Operational)
  or (1 ormore (FG2.Failed, AP2.Failed) and 
     FG1.Operational and AP1.Operational))]-> NoncriticalModeFailure;
    [1 ormore(AC.Failed , network.Failed ,
    1 ormore (AP1.Failed, FG1.Failed) 
    and 1 ormore (AP2.Failed, FG2.Failed)) ]->CriticalModefailure ;
end composite;
**};
end FGS.impl;

bus PowerSupply
annex emv2 {**
	use types FGSErrorModelLibrary;
  use behavior FGSErrorModelLibrary::Simple;        
	error propagations
	access: out propagation {NoService};
	flows
	esource: error source access{NoService} when Failed;
	end propagations;
	
component error behavior
    propagations  
      Failed-[]->access{NoService};
   end component; 
	**};
end PowerSupply;

bus EtherSwitch
annex emv2 {**
	use types FGSErrorModelLibrary;
  use behavior FGSErrorModelLibrary::Simple;        
	error propagations
	bindings: out propagation {NoService};
	flows
	esource: error source bindings{NoService} when Failed;
	end propagations;
	
component error behavior
    propagations  
      Failed-[]->bindings{NoService};
   end component; 
	**};
end EtherSwitch;

end DualFGS;
