package pkg1
public
	with EMV2, SEI;
	
	annex EMV2 {**
		error types
			use types ErrorLibrary;
			SensorFailure: type;
			CPUFailure: type;
			PowerSupplyFailure: type;
			NetworkFailure: type;
			-- low precision when GPS operates with one sensor only
			LowPrecisionData: type;
			-- incorrect data if there is a computing error in the algorithm
			IncorrectData: type;
			NoSignal: type;
			LowSignal: type;
			ObservableErrorTypes: type set {ServiceOmission, LowPrecisionData, IncorrectData};
		end types;
		
		-- state machine for simple FailStop behavior
		error behavior FailStopState
			states
				Operational: initial state;
				FailStop: state;
		end behavior;
		
		error behavior GPSProcessingFailed
			states
				Operational: initial state;
				NoService: state;
				LowPrecision: state;
				Incorrect: state;
		end behavior;
		
		error behavior FailStopTransient
			events
				Failure: error event;
			states
				Operational: initial state;
				FailStop: state;
			transitions
				-- sensor failure may be transient. We assume a 20% persistent sesnor failure rate.
				FailureTransition: Operational -[Failure]-> (FailStop with 0.2, Operational with 0.8);
		end behavior;
	**};

	system GPS
		features
			satelliteSignal: in feature;
			location: out data port;
		annex EMV2 {**
			use types ErrorLibrary, pkg1;
			use behavior pkg1::FailStopState;
			
			error propagations
				satelliteSignal: in propagation {NoSignal, LowSignal};
				location: out propagation {ServiceOmission, LowPrecisionData, IncorrectData};
				flows
					GPSAsErrorSource: error source location {ServiceOmission, LowPrecisionData, IncorrectData};
					SatelliteError: error path satelliteSignal {NoSignal} -> location {ServiceOmission};
					SatelliteError1: error path satelliteSignal {LowSignal} -> location {LowPrecisionData};
			end propagations;
			
			properties
				EMV2::hazards => ([crossreference => "1.1.1";
						failure => "Loss of GPS locations";
						phases => ("all");
						severity => ARP4761::Hazardous;
						likelihood => ARP4761::Remote;
						description => "No position readings due to GPS failure";
						comment => "Becomes critical hazard, if no redundant GPS";
					]) applies to GPSAsErrorSource.ServiceOmission;
				-- requirement of probability that GPS should not fail to provide service
				-- This should be met by the FTA based probability analysis.
				emv2::OccurrenceDistribution => [ProbabilityValue => 0.8e-7;
					Distribution => Poisson;] applies to GPSAsErrorSource.ServiceOmission, FailStop;
				-- failure contribution by the lack of stallite signal
				emv2::OccurrenceDistribution => [ProbabilityValue => 0.9e-7;
					Distribution => Poisson;] applies to satelliteSignal.NoSignal;
				-- Total outgoing probability of occurrence associated with the error propagation, i.e., incoming plus error source
				emv2::OccurrenceDistribution => [ProbabilityValue => 1.7e-7;
					Distribution => Poisson;] applies to location.ServiceOmission;
		**};
	end GPS;
	
	system implementation GPS.parts_SingleSensorTransient
		subcomponents
			SatelliteSignalReceiver1: device sensor_transient;
			cpu: processor CPU;
			network: bus Network;
			powersupply1: device PowerSupply;
		annex EMV2 {**
			use types ErrorLibrary;
			use behavior pkg1::FailStopState;
			
			composite error behavior
				states
					[1 ormore (SatelliteSignalReceiver1.FailStop, cpu.Failstop, network.FailStop,
						powersupply1.FailStop)]-> FailStop;
			end composite;
		**};
	end GPS.parts_SingleSensorTransient;
	
	Device sensor_transient
		features
			sensedData: out data port;
			networkaccess: requires bus access pkg1::Network;
			powersource: in feature;
		annex EMV2 {**
			use types ErrorLibrary;
			use behavior pkg1::FailStopTransient;
			
			error propagations
				sensedData: out propagation {ServiceOmission};
				powersource: in propagation {ServiceOmission};
				networkaccess: in propagation {ServiceOmission};
			end propagations;
			
			component error behavior
				transitions
					-- sensor failure may be transient. We assume a 20% persistent sensor failure rate.
					FailureTransition: Operational -[Failure]-> (FailStop with 0.2, Operational with 0.8);
				propagations
					SensorFailPropagation: FailStop -[]-> sensedData {ServiceOmission};
			end component;
			
			properties
				-- failure probability on error event must be consistent with probability on error source
				-- In our scenario the rate is higher, 
				-- but transient errors are filtered out according to the transition specification
				emv2::OccurrenceDistribution => [ProbabilityValue => 1.0e-4; Distribution => Poisson;] applies to Failure;
		**};
	end sensor_transient;
	
	processor CPU
		features
			powersource: in feature;
			networkaccess: requires bus access Network;
		annex EMV2 {**
			use types ErrorLibrary, pkg1;
			use behavior pkg1::FailStopState;
			
			error propagations
				bindings: out propagation {ServiceOmission, ValueError};
				powersource: in propagation {ServiceOmission};
				networkaccess: in propagation {ServiceOmission};
				networkaccess: out propagation {ServiceOmission};
				flows
					cpu_es1: error source bindings {ServiceOmission, ValueError} when {CPUFailure};
			end propagations;
			
			component error behavior
				propagations
					FailStop -[]-> bindings {ServiceOmission};
			end component;
			
			properties
				-- these properties should be consistent with the ones in CPU_errorbehavior
				EMV2::OccurrenceDistribution => [ProbabilityValue => 2.8e-5;
					Distribution => Poisson;] applies to cpu_es1.ServiceOmission;
				EMV2::OccurrenceDistribution => [ProbabilityValue => 2.8e-5; Distribution => Poisson;] applies to FailStop;
		**};
	end CPU;

	-- Here we specify the occurrence probability on the error source for flow based analysis
	-- and on the state for composite state analysis.
	-- We should be able to specify when FailStop as the error source condition and 
	-- the analysis should pick up the probability from this identified state.
	bus Network
		features
			power: in feature;
--			networkAccess: provides bus access Network;
		properties
			SEI::BandWidthCapacity => 300.0 KBytesps;
		annex EMV2 {**
			use types ErrorLibrary, pkg1;
			use behavior pkg1::FailStopState;
			
			error propagations
				bindings: out propagation {ServiceOmission};
				power: in propagation {ServiceOmission};
				access: in propagation {ServiceOmission};
				access: out propagation {ServiceOmission};
				flows
					cpu_es: error path access {ServiceOmission} -> bindings {ServiceOmission};
					power_es: error path power {ServiceOmission} -> bindings {ServiceOmission};
					network_binding_es: error source bindings {ServiceOmission} when {NetworkFailure};
					network_access_es: error source access {ServiceOmission} when {NetworkFailure};
			end propagations;
			
			properties
				EMV2::OccurrenceDistribution => [ProbabilityValue => 2.5e-5;
					Distribution => Poisson;] applies to network_binding_es.ServiceOmission;
				EMV2::OccurrenceDistribution => [ProbabilityValue => 2.5e-5;
					Distribution => Poisson;] applies to network_access_es.ServiceOmission;
				EMV2::OccurrenceDistribution => [ProbabilityValue => 2.5e-5; Distribution => Poisson;] applies to FailStop;
		**};
	end Network;
	
	-- Here we have the occurrence probability on the state and on the error event.
	-- The flow based analysis picks up the error event, while the composite state analysis the state value.
	device PowerSupply
		features
			power: out feature;
		annex EMV2 {**
			use types ErrorLibrary;
			use behavior pkg1::FailStopState;
			
			error propagations
				power: out propagation {ServiceOmission};
				flows
					power_es: error source power {ServiceOmission};
			end propagations;
			
			component error behavior
				events
					PowerFailure: error event;
				transitions
					Operational -[PowerFailure]-> FailStop;
				propagations
					FailStop -[]-> power {ServiceOmission};
			end component;
			
			properties
				EMV2::OccurrenceDistribution => [ProbabilityValue => 3.5e-7;
					Distribution => Poisson;] applies to power_es.ServiceOmission, FailStop, PowerFailure;
		**};
	end PowerSupply;
	
end pkg1;